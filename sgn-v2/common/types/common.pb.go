// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/common/v1/common.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// to make sure no chain id conflict within sgn system
// there is no way to guarantee the chain id we choose here will NEVER be
// used by another real evm chain in the future. we just do our best choosing
// an unlikely range. also value should be smaller than max int32
// corresponding value also needs to be coded in non-evm chain smart contracts
type NonEvmChainID int32

const (
	NonEvmChainID_UNDEFINED       NonEvmChainID = 0
	NonEvmChainID_FLOW_MAINNET    NonEvmChainID = 12340001
	NonEvmChainID_FLOW_TEST       NonEvmChainID = 12340002
	NonEvmChainID_FLOW_EMULATOR   NonEvmChainID = 12340003
	NonEvmChainID_SOLANA_MAINNET  NonEvmChainID = 12350001
	NonEvmChainID_SOLANA_TEST     NonEvmChainID = 12350002
	NonEvmChainID_SOLANA_EMULATOR NonEvmChainID = 12350003
	NonEvmChainID_APTOS_MAINNET   NonEvmChainID = 12360001
	NonEvmChainID_APTOS_TEST      NonEvmChainID = 12360002
	NonEvmChainID_APTOS_LOCAL     NonEvmChainID = 12360003
)

var NonEvmChainID_name = map[int32]string{
	0:        "UNDEFINED",
	12340001: "FLOW_MAINNET",
	12340002: "FLOW_TEST",
	12340003: "FLOW_EMULATOR",
	12350001: "SOLANA_MAINNET",
	12350002: "SOLANA_TEST",
	12350003: "SOLANA_EMULATOR",
	12360001: "APTOS_MAINNET",
	12360002: "APTOS_TEST",
	12360003: "APTOS_LOCAL",
}

var NonEvmChainID_value = map[string]int32{
	"UNDEFINED":       0,
	"FLOW_MAINNET":    12340001,
	"FLOW_TEST":       12340002,
	"FLOW_EMULATOR":   12340003,
	"SOLANA_MAINNET":  12350001,
	"SOLANA_TEST":     12350002,
	"SOLANA_EMULATOR": 12350003,
	"APTOS_MAINNET":   12360001,
	"APTOS_TEST":      12360002,
	"APTOS_LOCAL":     12360003,
}

func (x NonEvmChainID) String() string {
	return proto.EnumName(NonEvmChainID_name, int32(x))
}

func (NonEvmChainID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f48ec7784c70dc9d, []int{0}
}

type Address_Type int32

const (
	Address_Hex     Address_Type = 0
	Address_String  Address_Type = 1
	Address_Bytes20 Address_Type = 2
	Address_Bytes8  Address_Type = 3
	Address_Bytes32 Address_Type = 4
)

var Address_Type_name = map[int32]string{
	0: "Hex",
	1: "String",
	2: "Bytes20",
	3: "Bytes8",
	4: "Bytes32",
}

var Address_Type_value = map[string]int32{
	"Hex":     0,
	"String":  1,
	"Bytes20": 2,
	"Bytes8":  3,
	"Bytes32": 4,
}

func (x Address_Type) String() string {
	return proto.EnumName(Address_Type_name, int32(x))
}

func (Address_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f48ec7784c70dc9d, []int{3, 0}
}

type Supplement_Type int32

const (
	Supplement_Address Supplement_Type = 0
)

var Supplement_Type_name = map[int32]string{
	0: "Address",
}

var Supplement_Type_value = map[string]int32{
	"Address": 0,
}

func (x Supplement_Type) String() string {
	return proto.EnumName(Supplement_Type_name, int32(x))
}

func (Supplement_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f48ec7784c70dc9d, []int{5, 0}
}

// Signature is the structure representing an Ethereum ECDSA signature.
type Signature struct {
	// signer defines the Ethereum address of the signer.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	// sig_bytes defines the signature bytes.
	SigBytes []byte `protobuf:"bytes,2,opt,name=sig_bytes,json=sigBytes,proto3" json:"sig_bytes,omitempty" yaml:"sig_bytes"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48ec7784c70dc9d, []int{0}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *Signature) GetSigBytes() []byte {
	if m != nil {
		return m.SigBytes
	}
	return nil
}

type ContractInfo struct {
	// chain_id defines the chain ID of the contract
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// address defines the address of the contract. Note for non-evm chains,
	// address format is different
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
}

func (m *ContractInfo) Reset()         { *m = ContractInfo{} }
func (m *ContractInfo) String() string { return proto.CompactTextString(m) }
func (*ContractInfo) ProtoMessage()    {}
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48ec7784c70dc9d, []int{1}
}
func (m *ContractInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractInfo.Merge(m, src)
}
func (m *ContractInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContractInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContractInfo proto.InternalMessageInfo

func (m *ContractInfo) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ContractInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// ERC20Token describes an ERC20 token on a specific EVM-compatible chain
// Or a similar fungible token on non-evm chains.
type ERC20Token struct {
	// chain_id defines the chain ID
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// symbol defines the ERC20 token symbol
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty" yaml:"symbol"`
	// address defines the token contract address
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// decimals defines the token decimals
	Decimals uint32 `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty" yaml:"decimals"`
}

func (m *ERC20Token) Reset()         { *m = ERC20Token{} }
func (m *ERC20Token) String() string { return proto.CompactTextString(m) }
func (*ERC20Token) ProtoMessage()    {}
func (*ERC20Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48ec7784c70dc9d, []int{2}
}
func (m *ERC20Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20Token.Merge(m, src)
}
func (m *ERC20Token) XXX_Size() int {
	return m.Size()
}
func (m *ERC20Token) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20Token.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20Token proto.InternalMessageInfo

func (m *ERC20Token) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ERC20Token) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ERC20Token) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ERC20Token) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

// Address describes a common type of address processed in sgn, and has no relation with sgn native address
type Address struct {
	// data defines the address data
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// type defines the address type
	Type Address_Type `protobuf:"varint,2,opt,name=type,proto3,enum=sgn.common.v1.Address_Type" json:"type,omitempty"`
}

func (m *Address) Reset()      { *m = Address{} }
func (*Address) ProtoMessage() {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48ec7784c70dc9d, []int{3}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Address) GetType() Address_Type {
	if m != nil {
		return m.Type
	}
	return Address_Hex
}

// EventLog describes a generic event log for all kinds of chain.
type EventLog struct {
	Address     *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TxHash      []byte   `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	BlockNumber uint64   `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Index       uint32   `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	Event       []byte   `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	Spare       []byte   `protobuf:"bytes,6,opt,name=spare,proto3" json:"spare,omitempty"`
}

func (m *EventLog) Reset()      { *m = EventLog{} }
func (*EventLog) ProtoMessage() {}
func (*EventLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48ec7784c70dc9d, []int{4}
}
func (m *EventLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLog.Merge(m, src)
}
func (m *EventLog) XXX_Size() int {
	return m.Size()
}
func (m *EventLog) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLog.DiscardUnknown(m)
}

var xxx_messageInfo_EventLog proto.InternalMessageInfo

func (m *EventLog) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *EventLog) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *EventLog) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *EventLog) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *EventLog) GetEvent() []byte {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventLog) GetSpare() []byte {
	if m != nil {
		return m.Spare
	}
	return nil
}

// Supplement describes a piece of supplementary data, which gonna be used to store arbitrary data.
type Supplement struct {
	Type Supplement_Type `protobuf:"varint,1,opt,name=type,proto3,enum=sgn.common.v1.Supplement_Type" json:"type,omitempty"`
	Data []byte          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Supplement) Reset()         { *m = Supplement{} }
func (m *Supplement) String() string { return proto.CompactTextString(m) }
func (*Supplement) ProtoMessage()    {}
func (*Supplement) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48ec7784c70dc9d, []int{5}
}
func (m *Supplement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Supplement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Supplement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Supplement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supplement.Merge(m, src)
}
func (m *Supplement) XXX_Size() int {
	return m.Size()
}
func (m *Supplement) XXX_DiscardUnknown() {
	xxx_messageInfo_Supplement.DiscardUnknown(m)
}

var xxx_messageInfo_Supplement proto.InternalMessageInfo

func (m *Supplement) GetType() Supplement_Type {
	if m != nil {
		return m.Type
	}
	return Supplement_Address
}

func (m *Supplement) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("sgn.common.v1.NonEvmChainID", NonEvmChainID_name, NonEvmChainID_value)
	proto.RegisterEnum("sgn.common.v1.Address_Type", Address_Type_name, Address_Type_value)
	proto.RegisterEnum("sgn.common.v1.Supplement_Type", Supplement_Type_name, Supplement_Type_value)
	proto.RegisterType((*Signature)(nil), "sgn.common.v1.Signature")
	proto.RegisterType((*ContractInfo)(nil), "sgn.common.v1.ContractInfo")
	proto.RegisterType((*ERC20Token)(nil), "sgn.common.v1.ERC20Token")
	proto.RegisterType((*Address)(nil), "sgn.common.v1.Address")
	proto.RegisterType((*EventLog)(nil), "sgn.common.v1.EventLog")
	proto.RegisterType((*Supplement)(nil), "sgn.common.v1.Supplement")
}

func init() { proto.RegisterFile("sgn/common/v1/common.proto", fileDescriptor_f48ec7784c70dc9d) }

var fileDescriptor_f48ec7784c70dc9d = []byte{
	// 750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x6e, 0xda, 0x58,
	0x14, 0xc7, 0x71, 0x62, 0xbe, 0x0e, 0x90, 0x38, 0x37, 0x4c, 0x06, 0x65, 0x24, 0x93, 0xf1, 0x2a,
	0x33, 0x4a, 0x20, 0x21, 0x9b, 0x51, 0x76, 0x86, 0x38, 0x0a, 0x23, 0x02, 0x23, 0x43, 0x34, 0xd2,
	0x6c, 0x90, 0x81, 0x3b, 0xc6, 0x0a, 0xbe, 0x46, 0xb6, 0xa1, 0xf0, 0x16, 0x5d, 0xa5, 0x5d, 0xa6,
	0xed, 0xa6, 0xdb, 0xa6, 0x2f, 0xd0, 0x0f, 0xa9, 0xea, 0x32, 0xcb, 0xae, 0x50, 0x45, 0xf2, 0x02,
	0xe1, 0x09, 0xaa, 0x7b, 0x6d, 0x0c, 0xad, 0x2a, 0x55, 0xdd, 0x9d, 0xf3, 0x3b, 0xff, 0x7b, 0xee,
	0xb9, 0xff, 0x63, 0x19, 0xb6, 0x1d, 0x9d, 0xe4, 0xdb, 0x96, 0x69, 0x5a, 0x24, 0x3f, 0x3c, 0xf4,
	0xa3, 0x5c, 0xdf, 0xb6, 0x5c, 0x0b, 0xa5, 0x1c, 0x9d, 0xe4, 0x7c, 0x32, 0x3c, 0xdc, 0x4e, 0xeb,
	0x96, 0x6e, 0xb1, 0x4a, 0x9e, 0x46, 0x9e, 0x48, 0x32, 0x20, 0x5e, 0x37, 0x74, 0xa2, 0xb9, 0x03,
	0x1b, 0xa3, 0x3f, 0x20, 0xe2, 0x18, 0x3a, 0xc1, 0x76, 0x86, 0xdb, 0xe1, 0x76, 0xe3, 0xc5, 0x8d,
	0xd9, 0x24, 0x9b, 0x1a, 0x6b, 0x66, 0xef, 0x58, 0xf2, 0xb8, 0xa4, 0xfa, 0x02, 0x74, 0x08, 0x71,
	0xc7, 0xd0, 0x9b, 0xad, 0xb1, 0x8b, 0x9d, 0xcc, 0xca, 0x0e, 0xb7, 0x9b, 0x2c, 0xa6, 0x67, 0x93,
	0xac, 0x10, 0xa8, 0xbd, 0x92, 0xa4, 0xc6, 0x1c, 0x43, 0x2f, 0xb2, 0xb0, 0x07, 0xc9, 0x92, 0x45,
	0x5c, 0x5b, 0x6b, 0xbb, 0x65, 0xf2, 0xbf, 0x85, 0x72, 0x10, 0x6b, 0x77, 0x35, 0x83, 0x34, 0x8d,
	0x0e, 0xbb, 0x8f, 0x2f, 0x6e, 0xce, 0x26, 0xd9, 0x75, 0xaf, 0xc3, 0xbc, 0x22, 0xa9, 0x51, 0x16,
	0x96, 0x3b, 0x68, 0x0f, 0xa2, 0x5a, 0xa7, 0x63, 0x63, 0xc7, 0xbb, 0x30, 0x5e, 0x44, 0xb3, 0x49,
	0x76, 0xcd, 0x93, 0xfb, 0x05, 0x49, 0x9d, 0x4b, 0xa4, 0x0f, 0x1c, 0x80, 0xa2, 0x96, 0x0a, 0x07,
	0x0d, 0xeb, 0x12, 0x93, 0x9f, 0xbe, 0x8c, 0x5a, 0x31, 0x36, 0x5b, 0x56, 0xcf, 0xbf, 0x6b, 0xd9,
	0x0a, 0xc6, 0xa9, 0x15, 0x2c, 0x58, 0x9e, 0x6b, 0xf5, 0x87, 0x73, 0xa1, 0x3c, 0xc4, 0x3a, 0xb8,
	0x6d, 0x98, 0x5a, 0xcf, 0xc9, 0xf0, 0x3b, 0xdc, 0x6e, 0x6a, 0x79, 0x90, 0x79, 0x45, 0x52, 0x03,
	0x91, 0xf4, 0x84, 0x83, 0xa8, 0xec, 0x1f, 0x46, 0xc0, 0x77, 0x34, 0x57, 0x63, 0x2f, 0x48, 0xaa,
	0x2c, 0x46, 0x79, 0xe0, 0xdd, 0x71, 0x1f, 0xb3, 0x39, 0xd7, 0x0a, 0xbf, 0xe5, 0xbe, 0xda, 0x7a,
	0xce, 0x3f, 0x99, 0x6b, 0x8c, 0xfb, 0x58, 0x65, 0x42, 0x49, 0x06, 0x9e, 0x66, 0x28, 0x0a, 0xab,
	0x67, 0x78, 0x24, 0x84, 0x10, 0x40, 0xa4, 0xee, 0xda, 0x06, 0xd1, 0x05, 0x0e, 0x25, 0x20, 0xca,
	0xb6, 0x55, 0x38, 0x10, 0x56, 0x68, 0x81, 0x25, 0x7f, 0x09, 0xab, 0x41, 0xe1, 0xa8, 0x20, 0xf0,
	0xc7, 0xfc, 0xd3, 0xeb, 0x6c, 0x48, 0x7a, 0xc3, 0x41, 0x4c, 0x19, 0x62, 0xe2, 0x56, 0x2c, 0x1d,
	0x1d, 0x2c, 0x5c, 0xa0, 0xd3, 0x25, 0x0a, 0x5b, 0xdf, 0x9f, 0x64, 0xe1, 0xc4, 0xaf, 0x10, 0x75,
	0x47, 0xcd, 0xae, 0xe6, 0x74, 0xbd, 0x0f, 0x48, 0x8d, 0xb8, 0xa3, 0x33, 0xcd, 0xe9, 0xa2, 0xdf,
	0x21, 0xd9, 0xea, 0x59, 0xed, 0xcb, 0x26, 0x19, 0x98, 0x2d, 0x6c, 0x33, 0x57, 0x79, 0x35, 0xc1,
	0x58, 0x95, 0x21, 0x94, 0x86, 0xb0, 0x41, 0x3a, 0x78, 0xe4, 0x59, 0xa8, 0x7a, 0x09, 0xa5, 0x98,
	0xce, 0x93, 0x09, 0xb3, 0x7e, 0x5e, 0x42, 0xa9, 0xd3, 0xd7, 0x6c, 0x9c, 0x89, 0x78, 0x94, 0x25,
	0xfe, 0x13, 0x0c, 0x80, 0xfa, 0xa0, 0xdf, 0xef, 0x61, 0x93, 0x2a, 0x0b, 0xbe, 0x95, 0x1c, 0xb3,
	0x52, 0xfc, 0xe6, 0x01, 0x0b, 0xe1, 0x92, 0x9b, 0xc1, 0x4a, 0x56, 0x16, 0x2b, 0x91, 0x36, 0x7d,
	0x87, 0x13, 0xc1, 0xe6, 0x84, 0xd0, 0x9f, 0xf7, 0x1c, 0xa4, 0xaa, 0x16, 0x51, 0x86, 0x66, 0x89,
	0x7d, 0x63, 0x27, 0x28, 0x05, 0xf1, 0x8b, 0xea, 0x89, 0x72, 0x5a, 0xae, 0x2a, 0x27, 0x42, 0x08,
	0x6d, 0x42, 0xf2, 0xb4, 0x52, 0xfb, 0xb7, 0x79, 0x2e, 0x97, 0xab, 0x55, 0xa5, 0x21, 0x3c, 0xbb,
	0x7a, 0x08, 0x23, 0x01, 0xe2, 0x0c, 0x36, 0x94, 0x7a, 0x43, 0x78, 0x4e, 0x49, 0x1a, 0x52, 0x8c,
	0x28, 0xe7, 0x17, 0x15, 0xb9, 0x51, 0x53, 0x85, 0x17, 0x94, 0xfe, 0x02, 0x6b, 0xf5, 0x5a, 0x45,
	0xae, 0xca, 0xc1, 0xf1, 0x57, 0xf7, 0x0f, 0x61, 0x84, 0x20, 0xe1, 0x63, 0xd6, 0xe0, 0x86, 0xb2,
	0x2d, 0x58, 0xf7, 0x59, 0xd0, 0xe2, 0xf5, 0xbd, 0xd7, 0x58, 0xfe, 0xa7, 0x51, 0xab, 0x07, 0x1d,
	0xde, 0xde, 0xcc, 0xc2, 0x68, 0x03, 0xc0, 0xa3, 0xac, 0xc1, 0x3b, 0x8a, 0x10, 0x24, 0x3c, 0x54,
	0xa9, 0x95, 0xe4, 0x8a, 0xf0, 0xfe, 0x66, 0x16, 0x96, 0xa2, 0x31, 0x4e, 0xb8, 0xbe, 0x7a, 0x08,
	0x17, 0xff, 0x7e, 0x39, 0x15, 0xb9, 0x8f, 0x53, 0x91, 0xbb, 0x9d, 0x8a, 0xdc, 0xe7, 0xa9, 0xc8,
	0x3d, 0xbe, 0x13, 0x43, 0xb7, 0x77, 0x62, 0xe8, 0xd3, 0x9d, 0x18, 0xfa, 0x6f, 0x4f, 0x37, 0xdc,
	0xee, 0xa0, 0x45, 0x5d, 0xcd, 0xb7, 0x71, 0x0f, 0xdb, 0xfb, 0x04, 0xbb, 0x8f, 0x2c, 0xfb, 0x32,
	0xef, 0xe8, 0x64, 0x7f, 0x58, 0x98, 0xff, 0xcb, 0xa8, 0xb5, 0x4e, 0x2b, 0xc2, 0xfe, 0x51, 0x47,
	0x5f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x16, 0x4e, 0xc8, 0xe6, 0x04, 0x00, 0x00,
}

func (this *Signature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Signature)
	if !ok {
		that2, ok := that.(Signature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Signer != that1.Signer {
		return false
	}
	if !bytes.Equal(this.SigBytes, that1.SigBytes) {
		return false
	}
	return true
}
func (this *ContractInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContractInfo)
	if !ok {
		that2, ok := that.(ContractInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *ERC20Token) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ERC20Token)
	if !ok {
		that2, ok := that.(ERC20Token)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Decimals != that1.Decimals {
		return false
	}
	return true
}
func (this *Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Address)
	if !ok {
		that2, ok := that.(Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *EventLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventLog)
	if !ok {
		that2, ok := that.(EventLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	if !bytes.Equal(this.TxHash, that1.TxHash) {
		return false
	}
	if this.BlockNumber != that1.BlockNumber {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if !bytes.Equal(this.Event, that1.Event) {
		return false
	}
	if !bytes.Equal(this.Spare, that1.Spare) {
		return false
	}
	return true
}
func (this *Supplement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Supplement)
	if !ok {
		that2, ok := that.(Supplement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigBytes) > 0 {
		i -= len(m.SigBytes)
		copy(dAtA[i:], m.SigBytes)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SigBytes)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ERC20Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimals != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Spare) > 0 {
		i -= len(m.Spare)
		copy(dAtA[i:], m.Spare)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Spare)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Index != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockNumber != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Supplement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Supplement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Supplement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SigBytes)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ContractInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovCommon(uint64(m.ChainId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ERC20Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovCommon(uint64(m.ChainId))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovCommon(uint64(m.Decimals))
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCommon(uint64(m.Type))
	}
	return n
}

func (m *EventLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovCommon(uint64(m.BlockNumber))
	}
	if m.Index != 0 {
		n += 1 + sovCommon(uint64(m.Index))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Spare)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Supplement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCommon(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigBytes = append(m.SigBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SigBytes == nil {
				m.SigBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC20Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Address_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = append(m.Event[:0], dAtA[iNdEx:postIndex]...)
			if m.Event == nil {
				m.Event = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spare = append(m.Spare[:0], dAtA[iNdEx:postIndex]...)
			if m.Spare == nil {
				m.Spare = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Supplement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Supplement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Supplement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Supplement_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)