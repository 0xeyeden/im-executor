// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/message/v1/message.proto

package types

import (
	fmt "fmt"
	types "github.com/celer-network/im-executor/sgn-v2/common/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TransferType defines the type of a transfer at the receiver side (dst chain) associated with a message, if applicable.
type TransferType int32

const (
	// TRANSFER_TYPE_NULL indicates no transfer association.
	TRANSFER_TYPE_NULL TransferType = 0
	// TRANSFER_TYPE_LIQUIDITY_RELAY defines a relay transfer via a liquidity bridge.
	TRANSFER_TYPE_LIQUIDITY_RELAY TransferType = 1
	// TRANSFER_TYPE_LIQUIDITY_WITHDRAW defines a withdraw transfer from a liquidity bridge.
	TRANSFER_TYPE_LIQUIDITY_WITHDRAW TransferType = 2
	// TRANSFER_TYPE_PEG_MINT defines a mint transfer via a pegged token bridge.
	TRANSFER_TYPE_PEG_MINT TransferType = 3
	// TRANSFER_TYPE_PEG_MINT defines a withdraw transfer from an original token vault.
	TRANSFER_TYPE_PEG_WITHDRAW TransferType = 4
	// TRANSFER_TYPE_PEG_V2_MINT defines a mint transfer via a pegged token bridge v2.
	TRANSFER_TYPE_PEG_V2_MINT TransferType = 5
	// TRANSFER_TYPE_PEG_V2_WITHDRAW defines a withdraw transfer from an original token vault v2.
	TRANSFER_TYPE_PEG_V2_WITHDRAW TransferType = 6
)

var TransferType_name = map[int32]string{
	0: "TRANSFER_TYPE_NULL",
	1: "TRANSFER_TYPE_LIQUIDITY_RELAY",
	2: "TRANSFER_TYPE_LIQUIDITY_WITHDRAW",
	3: "TRANSFER_TYPE_PEG_MINT",
	4: "TRANSFER_TYPE_PEG_WITHDRAW",
	5: "TRANSFER_TYPE_PEG_V2_MINT",
	6: "TRANSFER_TYPE_PEG_V2_WITHDRAW",
}

var TransferType_value = map[string]int32{
	"TRANSFER_TYPE_NULL":               0,
	"TRANSFER_TYPE_LIQUIDITY_RELAY":    1,
	"TRANSFER_TYPE_LIQUIDITY_WITHDRAW": 2,
	"TRANSFER_TYPE_PEG_MINT":           3,
	"TRANSFER_TYPE_PEG_WITHDRAW":       4,
	"TRANSFER_TYPE_PEG_V2_MINT":        5,
	"TRANSFER_TYPE_PEG_V2_WITHDRAW":    6,
}

func (x TransferType) String() string {
	return proto.EnumName(TransferType_name, int32(x))
}

func (TransferType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{0}
}

// ExecutionStatus defines the on-chain execution status of a message.
type ExecutionStatus int32

const (
	// EXECUTION_STATUS_NULL defines the init (non-exist) execution status.
	EXECUTION_STATUS_NULL ExecutionStatus = 0
	// EXECUTION_STATUS_SUCCESS defines the successful on-chain execution status.
	EXECUTION_STATUS_SUCCESS ExecutionStatus = 1
	// EXECUTION_STATUS_FAILURE defines the failed on-chain execution status.
	EXECUTION_STATUS_FAILURE ExecutionStatus = 2
	// EXECUTION_STATUS_FALLBACK defines the fallback on-chain execution status.
	EXECUTION_STATUS_FALLBACK ExecutionStatus = 3
)

var ExecutionStatus_name = map[int32]string{
	0: "EXECUTION_STATUS_NULL",
	1: "EXECUTION_STATUS_SUCCESS",
	2: "EXECUTION_STATUS_FAILURE",
	3: "EXECUTION_STATUS_FALLBACK",
}

var ExecutionStatus_value = map[string]int32{
	"EXECUTION_STATUS_NULL":     0,
	"EXECUTION_STATUS_SUCCESS":  1,
	"EXECUTION_STATUS_FAILURE":  2,
	"EXECUTION_STATUS_FALLBACK": 3,
}

func (x ExecutionStatus) String() string {
	return proto.EnumName(ExecutionStatus_name, int32(x))
}

func (ExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{1}
}

// MsgType defines enum in contract MessageReceiver.sol
type MsgType int32

const (
	MsgType_MSG_TYPE_MESSAGE_WITH_TRANSFER MsgType = 0
	MsgType_MSG_TYPE_MESSAGE               MsgType = 1
)

var MsgType_name = map[int32]string{
	0: "MSG_TYPE_MESSAGE_WITH_TRANSFER",
	1: "MSG_TYPE_MESSAGE",
}

var MsgType_value = map[string]int32{
	"MSG_TYPE_MESSAGE_WITH_TRANSFER": 0,
	"MSG_TYPE_MESSAGE":               1,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{2}
}

type BridgeType int32

const (
	BRIDGE_TYPE_NULL       BridgeType = 0
	BRIDGE_TYPE_LIQUIDITY  BridgeType = 1
	BRIDGE_TYPE_PEG_VAULT  BridgeType = 2
	BRIDGE_TYPE_PEG_BRIDGE BridgeType = 3
)

var BridgeType_name = map[int32]string{
	0: "BRIDGE_TYPE_NULL",
	1: "BRIDGE_TYPE_LIQUIDITY",
	2: "BRIDGE_TYPE_PEG_VAULT",
	3: "BRIDGE_TYPE_PEG_BRIDGE",
}

var BridgeType_value = map[string]int32{
	"BRIDGE_TYPE_NULL":       0,
	"BRIDGE_TYPE_LIQUIDITY":  1,
	"BRIDGE_TYPE_PEG_VAULT":  2,
	"BRIDGE_TYPE_PEG_BRIDGE": 3,
}

func (x BridgeType) String() string {
	return proto.EnumName(BridgeType_name, int32(x))
}

func (BridgeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{3}
}

// Params defines the parameters for the module.
type Params struct {
	// trigger_sign_cooldown defines the minimal time between two trigger signing requests.
	TriggerSignCooldown time.Duration `protobuf:"bytes,1,opt,name=trigger_sign_cooldown,json=triggerSignCooldown,proto3,stdduration" json:"trigger_sign_cooldown,omitempty" yaml:"trigger_sign_cooldown"`
	// message_expired_time defines the expired time of message
	MessageExpiredTime time.Duration `protobuf:"bytes,2,opt,name=message_expired_time,json=messageExpiredTime,proto3,stdduration" json:"message_expired_time,omitempty" yaml:"message_expired_time"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetTriggerSignCooldown() time.Duration {
	if m != nil {
		return m.TriggerSignCooldown
	}
	return 0
}

func (m *Params) GetMessageExpiredTime() time.Duration {
	if m != nil {
		return m.MessageExpiredTime
	}
	return 0
}

// Celer treasury is an EOA or a multi-sig wallet.
// The treasury will share a portion of the Celer IM msg passing fee if a config exists.
// Not that celer_treasury_fee_perc should not exceed 100. The left portion is for sgn.
type FeeSplit struct {
	CelerTreasuryFeePerc uint32 `protobuf:"varint,1,opt,name=celer_treasury_fee_perc,json=celerTreasuryFeePerc,proto3" json:"celer_treasury_fee_perc,omitempty"`
	CelerTreasuryAddr    string `protobuf:"bytes,2,opt,name=celer_treasury_addr,json=celerTreasuryAddr,proto3" json:"celer_treasury_addr,omitempty"`
}

func (m *FeeSplit) Reset()         { *m = FeeSplit{} }
func (m *FeeSplit) String() string { return proto.CompactTextString(m) }
func (*FeeSplit) ProtoMessage()    {}
func (*FeeSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{1}
}
func (m *FeeSplit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeSplit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeSplit.Merge(m, src)
}
func (m *FeeSplit) XXX_Size() int {
	return m.Size()
}
func (m *FeeSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeSplit.DiscardUnknown(m)
}

var xxx_messageInfo_FeeSplit proto.InternalMessageInfo

func (m *FeeSplit) GetCelerTreasuryFeePerc() uint32 {
	if m != nil {
		return m.CelerTreasuryFeePerc
	}
	return 0
}

func (m *FeeSplit) GetCelerTreasuryAddr() string {
	if m != nil {
		return m.CelerTreasuryAddr
	}
	return ""
}

// Message describes the info of a cross-chain message.
type Message struct {
	// src_chain_id defines the source chain ID.
	SrcChainId uint64 `protobuf:"varint,1,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty" yaml:"src_chain_id"`
	// sender defines the sender address.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	// dst_chain_id defines the destination chain ID.
	DstChainId uint64 `protobuf:"varint,3,opt,name=dst_chain_id,json=dstChainId,proto3" json:"dst_chain_id,omitempty" yaml:"dst_chain_id"`
	// receiver defines the receiver address.
	Receiver string `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty" yaml:"receiver"`
	// data defines the message data.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty" yaml:"data"`
	// fee defines the message fee paid to SGN.
	Fee string `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty" yaml:"fee"`
	// transfer_type defines the associated type of transfer.
	TransferType TransferType `protobuf:"varint,7,opt,name=transfer_type,json=transferType,proto3,enum=sgn.message.v1.TransferType" json:"transfer_type,omitempty" yaml:"transfer_type"`
	// transfer_ref_id defines the reference ID of the transfer.
	// For sending via a liquidity bridge, ref_id is the src transfer ID.
	// For mint / withdrawal via a pegged bridge, ref_id is the reference ID of the pegged transfer.
	TransferRefId []byte `protobuf:"bytes,11,opt,name=transfer_ref_id,json=transferRefId,proto3" json:"transfer_ref_id,omitempty" yaml:"transfer"`
	// execution_status defines the on-chain execution status.
	ExecutionStatus ExecutionStatus `protobuf:"varint,8,opt,name=execution_status,json=executionStatus,proto3,enum=sgn.message.v1.ExecutionStatus" json:"execution_status,omitempty" yaml:"execution_status"`
	// signatures defines the signatures to be verified on MessageBus.
	Signatures []types.Signature `protobuf:"bytes,9,rep,name=signatures,proto3" json:"signatures" yaml:"signatures"`
	// last_req_time defines the latest timestamp a signing request was made.
	// Used for anti-dos.
	LastReqTime int64 `protobuf:"varint,10,opt,name=last_req_time,json=lastReqTime,proto3" json:"last_req_time,omitempty" yaml:"last_req_time"`
	// source tx hash of the message
	SrcTxHash string `protobuf:"bytes,12,opt,name=src_tx_hash,json=srcTxHash,proto3" json:"src_tx_hash,omitempty" yaml:"src_tx_hash"`
	// v2 message, use bytes Addr
	IsBytesAddr bool `protobuf:"varint,13,opt,name=is_bytes_addr,json=isBytesAddr,proto3" json:"is_bytes_addr,omitempty" yaml:"is_bytes_addr"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{2}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetSrcChainId() uint64 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func (m *Message) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Message) GetDstChainId() uint64 {
	if m != nil {
		return m.DstChainId
	}
	return 0
}

func (m *Message) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *Message) GetTransferType() TransferType {
	if m != nil {
		return m.TransferType
	}
	return TRANSFER_TYPE_NULL
}

func (m *Message) GetTransferRefId() []byte {
	if m != nil {
		return m.TransferRefId
	}
	return nil
}

func (m *Message) GetExecutionStatus() ExecutionStatus {
	if m != nil {
		return m.ExecutionStatus
	}
	return EXECUTION_STATUS_NULL
}

func (m *Message) GetSignatures() []types.Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *Message) GetLastReqTime() int64 {
	if m != nil {
		return m.LastReqTime
	}
	return 0
}

func (m *Message) GetSrcTxHash() string {
	if m != nil {
		return m.SrcTxHash
	}
	return ""
}

func (m *Message) GetIsBytesAddr() bool {
	if m != nil {
		return m.IsBytesAddr
	}
	return false
}

// Transfer defines the optional transfer info associated with a message.
// This is not directly stored in consensus db.
type Transfer struct {
	// token defines the token address of a transfer.
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty" yaml:"token"`
	// amount defines the amount of a transfer.
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty" yaml:"amount"`
	// wd_seq_num defines the sequence number required for withdrawals from a liquidity bridge.
	WdSeqNum uint64 `protobuf:"varint,3,opt,name=wd_seq_num,json=wdSeqNum,proto3" json:"wd_seq_num,omitempty" yaml:"wd_seq_num"`
}

func (m *Transfer) Reset()         { *m = Transfer{} }
func (m *Transfer) String() string { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()    {}
func (*Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{3}
}
func (m *Transfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfer.Merge(m, src)
}
func (m *Transfer) XXX_Size() int {
	return m.Size()
}
func (m *Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_Transfer proto.InternalMessageInfo

func (m *Transfer) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Transfer) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Transfer) GetWdSeqNum() uint64 {
	if m != nil {
		return m.WdSeqNum
	}
	return 0
}

// ExecutionContext defines all the info needed for executing a message.
type ExecutionContext struct {
	// message_id defines the message ID.
	MessageId []byte `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty" yaml:"message_id"`
	// message defines the message to be executed, along with the required relayer signatures.
	Message Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message" yaml:"message"`
	// transfer defines the optional transfer info associated with the message.
	// it is not stored in consensus db, but derived from message fields.
	Transfer *Transfer `protobuf:"bytes,3,opt,name=transfer,proto3" json:"transfer,omitempty" yaml:"transfer"`
}

func (m *ExecutionContext) Reset()         { *m = ExecutionContext{} }
func (m *ExecutionContext) String() string { return proto.CompactTextString(m) }
func (*ExecutionContext) ProtoMessage()    {}
func (*ExecutionContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{4}
}
func (m *ExecutionContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionContext.Merge(m, src)
}
func (m *ExecutionContext) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionContext) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionContext.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionContext proto.InternalMessageInfo

func (m *ExecutionContext) GetMessageId() []byte {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *ExecutionContext) GetMessage() Message {
	if m != nil {
		return m.Message
	}
	return Message{}
}

func (m *ExecutionContext) GetTransfer() *Transfer {
	if m != nil {
		return m.Transfer
	}
	return nil
}

// FeeClaimDetails describes the fees to be claimed on the EVM chain.
type FeeClaimDetails struct {
	// chain_id defines the EVM chain ID for the claim.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// cumulative_fee_amount defines the cumulative fees claimable on the EVM chain.
	CumulativeFeeAmount types1.DecCoin `protobuf:"bytes,2,opt,name=cumulative_fee_amount,json=cumulativeFeeAmount,proto3" json:"cumulative_fee_amount" yaml:"cumulative_fee_amount"`
	// signatures defines the signatures to be verified on the EVM chain.
	Signatures []types.Signature `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures" yaml:"signatures"`
}

func (m *FeeClaimDetails) Reset()         { *m = FeeClaimDetails{} }
func (m *FeeClaimDetails) String() string { return proto.CompactTextString(m) }
func (*FeeClaimDetails) ProtoMessage()    {}
func (*FeeClaimDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{5}
}
func (m *FeeClaimDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeClaimDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeClaimDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeClaimDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeClaimDetails.Merge(m, src)
}
func (m *FeeClaimDetails) XXX_Size() int {
	return m.Size()
}
func (m *FeeClaimDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeClaimDetails.DiscardUnknown(m)
}

var xxx_messageInfo_FeeClaimDetails proto.InternalMessageInfo

func (m *FeeClaimDetails) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *FeeClaimDetails) GetCumulativeFeeAmount() types1.DecCoin {
	if m != nil {
		return m.CumulativeFeeAmount
	}
	return types1.DecCoin{}
}

func (m *FeeClaimDetails) GetSignatures() []types.Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// FeeClaimInfo describes the fee claim metadata and details for a recipient.
type FeeClaimInfo struct {
	// recipient defines the Ethereum address of the fee recipient.
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// last_claim_time defines the last time a fee claim was signed by the validators.
	LastClaimTime time.Time `protobuf:"bytes,2,opt,name=last_claim_time,json=lastClaimTime,proto3,stdtime" json:"last_claim_time" yaml:"last_claim_time"`
	// fee_claim_details_list defines the list of fee claim details
	FeeClaimDetailsList []FeeClaimDetails `protobuf:"bytes,3,rep,name=fee_claim_details_list,json=feeClaimDetailsList,proto3" json:"fee_claim_details_list" yaml:"fee_claim_details_list"`
}

func (m *FeeClaimInfo) Reset()         { *m = FeeClaimInfo{} }
func (m *FeeClaimInfo) String() string { return proto.CompactTextString(m) }
func (*FeeClaimInfo) ProtoMessage()    {}
func (*FeeClaimInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{6}
}
func (m *FeeClaimInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeClaimInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeClaimInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeClaimInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeClaimInfo.Merge(m, src)
}
func (m *FeeClaimInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeeClaimInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeClaimInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeeClaimInfo proto.InternalMessageInfo

func (m *FeeClaimInfo) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *FeeClaimInfo) GetLastClaimTime() time.Time {
	if m != nil {
		return m.LastClaimTime
	}
	return time.Time{}
}

func (m *FeeClaimInfo) GetFeeClaimDetailsList() []FeeClaimDetails {
	if m != nil {
		return m.FeeClaimDetailsList
	}
	return nil
}

// MessageBusInfo defines the info of a MessageBus contract.
type MessageBusInfo struct {
	// contract_info defines the MessageBus contract info.
	ContractInfo *types.ContractInfo `protobuf:"bytes,1,opt,name=contract_info,json=contractInfo,proto3" json:"contract_info,omitempty" yaml:"contract_info"`
	// fee_token_symbol defines the symbol of the native gas token to pay message fees.
	FeeTokenSymbol   string    `protobuf:"bytes,2,opt,name=fee_token_symbol,json=feeTokenSymbol,proto3" json:"fee_token_symbol,omitempty" yaml:"fee_token_symbol"`
	FeeSplitOverride *FeeSplit `protobuf:"bytes,3,opt,name=fee_split_override,json=feeSplitOverride,proto3" json:"fee_split_override,omitempty" yaml:"fee_split_override"`
}

func (m *MessageBusInfo) Reset()         { *m = MessageBusInfo{} }
func (m *MessageBusInfo) String() string { return proto.CompactTextString(m) }
func (*MessageBusInfo) ProtoMessage()    {}
func (*MessageBusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{7}
}
func (m *MessageBusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageBusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageBusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageBusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBusInfo.Merge(m, src)
}
func (m *MessageBusInfo) XXX_Size() int {
	return m.Size()
}
func (m *MessageBusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBusInfo proto.InternalMessageInfo

func (m *MessageBusInfo) GetContractInfo() *types.ContractInfo {
	if m != nil {
		return m.ContractInfo
	}
	return nil
}

func (m *MessageBusInfo) GetFeeTokenSymbol() string {
	if m != nil {
		return m.FeeTokenSymbol
	}
	return ""
}

func (m *MessageBusInfo) GetFeeSplitOverride() *FeeSplit {
	if m != nil {
		return m.FeeSplitOverride
	}
	return nil
}

// MsgProposal describes a message config proposal, note it must be a whole json
type MsgProposal struct {
	// title defines the title of the proposal.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	// description defines the proposal description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	// message_buses defines the list of MessageBus infos to update.
	MessageBuses   []*MessageBusInfo `protobuf:"bytes,3,rep,name=message_buses,json=messageBuses,proto3" json:"message_buses,omitempty" yaml:"message_buses"`
	FeeSplitGlobal *FeeSplit         `protobuf:"bytes,5,opt,name=fee_split_global,json=feeSplitGlobal,proto3" json:"fee_split_global,omitempty" yaml:"fee_split_global"`
	// deposit defines the amount for MsgSubmitProposal
	Deposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=deposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposit" yaml:"deposit"`
}

func (m *MsgProposal) Reset()         { *m = MsgProposal{} }
func (m *MsgProposal) String() string { return proto.CompactTextString(m) }
func (*MsgProposal) ProtoMessage()    {}
func (*MsgProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_1199d6c48a0ec756, []int{8}
}
func (m *MsgProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposal.Merge(m, src)
}
func (m *MsgProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposal proto.InternalMessageInfo

func (m *MsgProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgProposal) GetMessageBuses() []*MessageBusInfo {
	if m != nil {
		return m.MessageBuses
	}
	return nil
}

func (m *MsgProposal) GetFeeSplitGlobal() *FeeSplit {
	if m != nil {
		return m.FeeSplitGlobal
	}
	return nil
}

func init() {
	proto.RegisterEnum("sgn.message.v1.TransferType", TransferType_name, TransferType_value)
	proto.RegisterEnum("sgn.message.v1.ExecutionStatus", ExecutionStatus_name, ExecutionStatus_value)
	proto.RegisterEnum("sgn.message.v1.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("sgn.message.v1.BridgeType", BridgeType_name, BridgeType_value)
	proto.RegisterType((*Params)(nil), "sgn.message.v1.Params")
	proto.RegisterType((*FeeSplit)(nil), "sgn.message.v1.FeeSplit")
	proto.RegisterType((*Message)(nil), "sgn.message.v1.Message")
	proto.RegisterType((*Transfer)(nil), "sgn.message.v1.Transfer")
	proto.RegisterType((*ExecutionContext)(nil), "sgn.message.v1.ExecutionContext")
	proto.RegisterType((*FeeClaimDetails)(nil), "sgn.message.v1.FeeClaimDetails")
	proto.RegisterType((*FeeClaimInfo)(nil), "sgn.message.v1.FeeClaimInfo")
	proto.RegisterType((*MessageBusInfo)(nil), "sgn.message.v1.MessageBusInfo")
	proto.RegisterType((*MsgProposal)(nil), "sgn.message.v1.MsgProposal")
}

func init() { proto.RegisterFile("sgn/message/v1/message.proto", fileDescriptor_1199d6c48a0ec756) }

var fileDescriptor_1199d6c48a0ec756 = []byte{
	// 1701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcb, 0x6f, 0x23, 0x49,
	0x19, 0x77, 0x27, 0x99, 0x3c, 0xca, 0x4e, 0xe2, 0xa9, 0x3c, 0xc6, 0xc9, 0x64, 0xdc, 0xa1, 0x58,
	0x56, 0x61, 0xc4, 0xd8, 0x9a, 0x2c, 0x20, 0x18, 0x38, 0xe0, 0x76, 0x9c, 0x6c, 0x6b, 0x9d, 0x6c,
	0x28, 0x3b, 0x2c, 0x33, 0x08, 0xb5, 0xda, 0xdd, 0xe5, 0x4e, 0x6b, 0xdc, 0xdd, 0x4e, 0x57, 0x39,
	0x93, 0xc0, 0x3f, 0xc0, 0x05, 0x69, 0xe1, 0x80, 0x56, 0x2b, 0x0e, 0x2b, 0x71, 0xe7, 0xc4, 0x9f,
	0xc0, 0x61, 0x8f, 0x23, 0x4e, 0x88, 0x83, 0x41, 0x33, 0x17, 0xc4, 0xd1, 0x9c, 0xb8, 0xa1, 0x7a,
	0xb4, 0xdd, 0xed, 0x78, 0xe0, 0xb2, 0xa7, 0xb8, 0xbe, 0xdf, 0xef, 0xab, 0xef, 0xfd, 0x55, 0x07,
	0xec, 0x51, 0x2f, 0xac, 0x06, 0x84, 0x52, 0xdb, 0x23, 0xd5, 0xeb, 0xa7, 0xc9, 0xcf, 0x4a, 0x3f,
	0x8e, 0x58, 0x04, 0xd7, 0xa8, 0x17, 0x56, 0x12, 0xd1, 0xf5, 0xd3, 0xdd, 0x1d, 0x27, 0xa2, 0x41,
	0x44, 0x2d, 0x81, 0x56, 0xe5, 0x41, 0x52, 0x77, 0xcb, 0xf2, 0x54, 0xed, 0xd8, 0x94, 0x5f, 0xd4,
	0x21, 0xcc, 0x7e, 0x5a, 0x75, 0x22, 0x3f, 0x54, 0xf8, 0xa6, 0x17, 0x79, 0x91, 0xd4, 0xe3, 0xbf,
	0x12, 0x2d, 0x2f, 0x8a, 0xbc, 0x1e, 0xa9, 0x8a, 0x53, 0x67, 0xd0, 0xad, 0xba, 0x83, 0xd8, 0x66,
	0x7e, 0x94, 0x68, 0xe9, 0xd3, 0x38, 0xf3, 0x03, 0x42, 0x99, 0x1d, 0xf4, 0x15, 0x61, 0x97, 0xfb,
	0xef, 0x44, 0x41, 0x10, 0x85, 0xdc, 0x7d, 0xf9, 0x4b, 0x62, 0xe8, 0xcf, 0x73, 0x60, 0xf1, 0xdc,
	0x8e, 0xed, 0x80, 0xc2, 0xcf, 0x35, 0xb0, 0xc5, 0x62, 0xdf, 0xf3, 0x48, 0x6c, 0x51, 0xdf, 0x0b,
	0x2d, 0x27, 0x8a, 0x7a, 0x6e, 0xf4, 0x2a, 0x2c, 0x69, 0xfb, 0xda, 0x41, 0xfe, 0x70, 0xa7, 0x22,
	0x0d, 0x55, 0x12, 0x43, 0x95, 0x23, 0xe5, 0x88, 0xf1, 0xd1, 0x97, 0x43, 0x3d, 0xf7, 0xaf, 0xa1,
	0xae, 0xcf, 0xd4, 0xff, 0x56, 0x14, 0xf8, 0x8c, 0x04, 0x7d, 0x76, 0x3b, 0x1a, 0xea, 0x7b, 0xb7,
	0x76, 0xd0, 0x7b, 0x86, 0x66, 0x12, 0xd1, 0x67, 0x7f, 0xd7, 0x35, 0xbc, 0xa1, 0xb0, 0x96, 0xef,
	0x85, 0x75, 0x85, 0xc0, 0xdf, 0x69, 0x60, 0x53, 0x25, 0xd9, 0x22, 0x37, 0x7d, 0x3f, 0x26, 0xae,
	0xc5, 0xe3, 0x2c, 0xcd, 0xfd, 0x3f, 0xdf, 0x4c, 0xe5, 0x5b, 0x79, 0x96, 0x7a, 0xc6, 0xb5, 0x87,
	0xd2, 0xb5, 0x59, 0x3c, 0xe9, 0x19, 0x54, 0x50, 0x43, 0x22, 0x6d, 0x3f, 0x20, 0xcf, 0x16, 0x3e,
	0xfb, 0x42, 0xcf, 0xa1, 0x2b, 0xb0, 0x7c, 0x4c, 0x48, 0xab, 0xdf, 0xf3, 0x19, 0xfc, 0x0e, 0x78,
	0xe0, 0x90, 0x1e, 0x89, 0x2d, 0x16, 0x13, 0x9b, 0x0e, 0xe2, 0x5b, 0xab, 0x4b, 0x88, 0xd5, 0x27,
	0xb1, 0x23, 0x12, 0xb9, 0x8a, 0x37, 0x05, 0xdc, 0x56, 0xe8, 0x31, 0x21, 0xe7, 0x24, 0x76, 0x60,
	0x05, 0x6c, 0x4c, 0xa9, 0xd9, 0xae, 0x1b, 0x8b, 0xf8, 0x56, 0xf0, 0xfd, 0x8c, 0x4a, 0xcd, 0x75,
	0x63, 0xf4, 0xc7, 0x45, 0xb0, 0x74, 0x2a, 0xfd, 0x81, 0xdf, 0x07, 0x05, 0x1a, 0x3b, 0x96, 0x73,
	0x69, 0xfb, 0xa1, 0xe5, 0xbb, 0xc2, 0xce, 0x82, 0xf1, 0x60, 0x34, 0xd4, 0x37, 0x64, 0x4c, 0x69,
	0x14, 0x61, 0x40, 0x63, 0xa7, 0xce, 0x4f, 0xa6, 0x0b, 0xbf, 0x09, 0x16, 0x29, 0x09, 0x5d, 0xa2,
	0x2c, 0x19, 0xf7, 0x47, 0x43, 0x7d, 0x55, 0x29, 0x09, 0x39, 0xc2, 0x8a, 0xc0, 0xad, 0xb8, 0x94,
	0x4d, 0xac, 0xcc, 0x4f, 0x5b, 0x49, 0xa3, 0x08, 0x03, 0x97, 0xb2, 0xc4, 0x4a, 0x15, 0x2c, 0xc7,
	0xc4, 0x21, 0xfe, 0x35, 0x89, 0x4b, 0x0b, 0xc2, 0xce, 0xc6, 0x68, 0xa8, 0xaf, 0x4b, 0xb5, 0x04,
	0x41, 0x78, 0x4c, 0x82, 0x5f, 0x07, 0x0b, 0xae, 0xcd, 0xec, 0xd2, 0xbd, 0x7d, 0xed, 0xa0, 0x60,
	0xac, 0x8f, 0x86, 0x7a, 0x5e, 0xd9, 0xb0, 0x99, 0x8d, 0xb0, 0x00, 0xe1, 0x3e, 0x98, 0xef, 0x12,
	0x52, 0x5a, 0x14, 0x17, 0xae, 0x8d, 0x86, 0x3a, 0x90, 0x9c, 0x2e, 0x21, 0x08, 0x73, 0x08, 0xfe,
	0x0c, 0xac, 0xb2, 0xd8, 0x0e, 0x69, 0x97, 0xe7, 0xf5, 0xb6, 0x4f, 0x4a, 0x4b, 0xfb, 0xda, 0xc1,
	0xda, 0xe1, 0x5e, 0x25, 0x3b, 0xb4, 0x95, 0xb6, 0x22, 0xb5, 0x6f, 0xfb, 0xc4, 0x28, 0x8d, 0x86,
	0xfa, 0x66, 0xd2, 0xa6, 0x29, 0x65, 0x84, 0x0b, 0x2c, 0xc5, 0x83, 0x3f, 0x00, 0xeb, 0x63, 0x3c,
	0x26, 0x5d, 0x9e, 0x92, 0xbc, 0x70, 0x37, 0x15, 0x5b, 0x42, 0x40, 0x78, 0xec, 0x08, 0x26, 0x5d,
	0xd3, 0x85, 0x1e, 0x28, 0x92, 0x1b, 0xe2, 0x0c, 0x78, 0x8f, 0x5a, 0x94, 0xd9, 0x6c, 0x40, 0x4b,
	0xcb, 0xc2, 0x39, 0x7d, 0xda, 0xb9, 0x46, 0xc2, 0x6b, 0x09, 0x9a, 0xf1, 0x70, 0x34, 0xd4, 0x1f,
	0xc8, 0xeb, 0xa7, 0xaf, 0x40, 0x78, 0x9d, 0x64, 0xd9, 0xb0, 0x05, 0x00, 0x1f, 0x32, 0x9b, 0x0d,
	0x62, 0x42, 0x4b, 0x2b, 0xfb, 0xf3, 0x07, 0xf9, 0xc3, 0x92, 0x30, 0xa1, 0x16, 0xc1, 0xf5, 0xd3,
	0x4a, 0x2b, 0x21, 0x18, 0x3b, 0x7c, 0x5a, 0x46, 0x43, 0xfd, 0xbe, 0x6a, 0x81, 0xb1, 0x26, 0xef,
	0x9a, 0xf1, 0x01, 0xfe, 0x10, 0xac, 0xf6, 0x6c, 0xca, 0xac, 0x98, 0x5c, 0xc9, 0x31, 0x04, 0xfb,
	0xda, 0xc1, 0x7c, 0x3a, 0x73, 0x19, 0x18, 0xe1, 0x3c, 0x3f, 0x63, 0x72, 0xc5, 0x67, 0x06, 0x7e,
	0x17, 0xe4, 0x79, 0x43, 0xb2, 0x1b, 0xeb, 0xd2, 0xa6, 0x97, 0xa5, 0x82, 0xa8, 0xdf, 0xf6, 0x68,
	0xa8, 0xc3, 0x49, 0xb7, 0x2a, 0x10, 0xe1, 0x15, 0x1a, 0x3b, 0xed, 0x9b, 0x0f, 0x6d, 0x7a, 0xc9,
	0xad, 0xfa, 0xd4, 0xea, 0xdc, 0x32, 0x42, 0xe5, 0x70, 0xac, 0xee, 0x6b, 0x07, 0xcb, 0x69, 0xab,
	0x19, 0x18, 0xe1, 0xbc, 0x4f, 0x0d, 0x7e, 0x14, 0x03, 0xf3, 0x5b, 0x0d, 0x2c, 0x27, 0x75, 0x86,
	0xef, 0x83, 0x7b, 0x2c, 0x7a, 0x49, 0xe4, 0x6e, 0x2b, 0x18, 0xc5, 0xd1, 0x50, 0x2f, 0xa8, 0x8a,
	0x71, 0x31, 0xc2, 0x12, 0xe6, 0xe3, 0x61, 0x07, 0xd1, 0x20, 0x64, 0x77, 0xc7, 0x43, 0xca, 0x11,
	0x56, 0x04, 0xf8, 0x01, 0x00, 0xaf, 0x5c, 0x8b, 0x92, 0x2b, 0x2b, 0x1c, 0x04, 0x6a, 0x38, 0xb6,
	0x26, 0xa9, 0x9c, 0x60, 0x08, 0x2f, 0xbf, 0x72, 0x5b, 0xe4, 0xea, 0x6c, 0x10, 0xa0, 0xa1, 0x06,
	0x8a, 0xe3, 0xfa, 0xd6, 0xa3, 0x90, 0x91, 0x1b, 0x06, 0xbf, 0x0d, 0x40, 0xb2, 0x84, 0xd4, 0x30,
	0x17, 0xd2, 0x37, 0x4d, 0x30, 0x84, 0x57, 0xd4, 0xc1, 0x74, 0xa1, 0x09, 0x96, 0xd4, 0x41, 0x2d,
	0xc5, 0x07, 0xd3, 0x8d, 0xa4, 0xd6, 0x85, 0xb1, 0xad, 0x8a, 0xbc, 0x96, 0xb9, 0x0f, 0xe1, 0x44,
	0x1f, 0x9a, 0x60, 0x39, 0xe9, 0x56, 0x11, 0x48, 0xd2, 0x31, 0x33, 0x26, 0x66, 0x76, 0xb3, 0x8f,
	0xd5, 0xd1, 0x7f, 0x34, 0xb0, 0x7e, 0x4c, 0x48, 0xbd, 0x67, 0xfb, 0xc1, 0x11, 0x61, 0xb6, 0xdf,
	0xa3, 0x70, 0x07, 0x2c, 0x67, 0x57, 0x15, 0x5e, 0x72, 0xd4, 0xa2, 0xb8, 0x06, 0x5b, 0xce, 0x20,
	0x18, 0xf4, 0x6c, 0xe6, 0x5f, 0x13, 0xb1, 0x38, 0x53, 0xe9, 0xcf, 0x1f, 0xee, 0x55, 0xd4, 0x83,
	0xca, 0x9f, 0xd0, 0x8a, 0x7a, 0x42, 0x2b, 0x47, 0xc4, 0xa9, 0x47, 0x7e, 0x68, 0xbc, 0xa7, 0xe2,
	0x52, 0x6f, 0xcc, 0xcc, 0x8b, 0x10, 0xde, 0x98, 0xc8, 0x8f, 0x09, 0xa9, 0xc9, 0xe2, 0x65, 0xa7,
	0x64, 0xfe, 0x2b, 0x99, 0x12, 0xf4, 0x9b, 0x39, 0x50, 0x48, 0x62, 0x37, 0xc3, 0x6e, 0x04, 0xf7,
	0xc0, 0x4a, 0x4c, 0x1c, 0xbf, 0xef, 0x93, 0x90, 0x89, 0xc8, 0x57, 0xf0, 0x44, 0x00, 0xbb, 0x60,
	0x5d, 0x4c, 0x8d, 0xc3, 0xf9, 0xe9, 0xd7, 0x6d, 0xf7, 0xce, 0xeb, 0xd6, 0x4e, 0x9e, 0x78, 0x03,
	0x29, 0x57, 0xb6, 0x53, 0x63, 0x37, 0xb9, 0x00, 0x7d, 0xca, 0xdf, 0x2d, 0x31, 0xab, 0xc2, 0x0b,
	0x31, 0x7e, 0xbf, 0x04, 0xdb, 0x3c, 0x1f, 0x92, 0xe5, 0xca, 0x9a, 0x58, 0x3d, 0x9f, 0x32, 0x15,
	0xf7, 0x9d, 0x05, 0x34, 0x55, 0x3f, 0xe3, 0x1b, 0xca, 0xe6, 0xa3, 0xf1, 0xba, 0x9d, 0x71, 0x19,
	0xc2, 0x1b, 0xdd, 0xac, 0x5e, 0x93, 0x4b, 0x3f, 0x9f, 0x03, 0x6b, 0x49, 0x1f, 0x0e, 0xa8, 0xc8,
	0xca, 0x0b, 0xb0, 0xea, 0x44, 0x21, 0x8b, 0x6d, 0x87, 0x59, 0x7e, 0xd8, 0x8d, 0xd4, 0xf7, 0xc6,
	0xc3, 0xa9, 0xf4, 0xd7, 0x15, 0x87, 0xeb, 0xa4, 0x67, 0x3e, 0xa3, 0x8b, 0x70, 0xc1, 0x49, 0xf1,
	0x60, 0x03, 0x14, 0xb9, 0x7b, 0x62, 0x98, 0x2d, 0x7a, 0x1b, 0x74, 0xa2, 0x9e, 0x9a, 0xe4, 0xd4,
	0x16, 0x9d, 0x66, 0x20, 0xbc, 0xd6, 0x25, 0xa4, 0xcd, 0x25, 0x2d, 0x21, 0x80, 0x04, 0x40, 0x4e,
	0xa2, 0xfc, 0x81, 0xb7, 0xa2, 0x6b, 0x12, 0xc7, 0xbe, 0x4b, 0xde, 0x35, 0x1a, 0xc9, 0x97, 0x80,
	0xf1, 0x68, 0x34, 0xd4, 0x77, 0x26, 0x26, 0xb2, 0xda, 0x08, 0x73, 0xcf, 0x04, 0xf1, 0xe3, 0x44,
	0xf4, 0xfb, 0x79, 0x90, 0x3f, 0xa5, 0xde, 0x79, 0x1c, 0xf5, 0x23, 0x6a, 0xf7, 0xc4, 0x96, 0xf2,
	0x59, 0x8f, 0xc8, 0x5e, 0xc9, 0x6c, 0x29, 0x2e, 0xe6, 0x5b, 0x8a, 0xff, 0x85, 0xdf, 0x03, 0x79,
	0x97, 0x50, 0x27, 0xf6, 0xfb, 0x7c, 0x8d, 0xa8, 0x00, 0x53, 0x0b, 0x35, 0x05, 0x22, 0x9c, 0xa6,
	0xc2, 0x9f, 0x83, 0xd5, 0x64, 0x9d, 0x74, 0x06, 0x74, 0xdc, 0xfa, 0xe5, 0x77, 0xad, 0x0e, 0x59,
	0xb2, 0x74, 0xfa, 0x33, 0xea, 0x08, 0x17, 0x82, 0x31, 0x93, 0x50, 0x68, 0xc9, 0xf4, 0xcb, 0xc8,
	0xbd, 0x5e, 0xd4, 0xb1, 0x7b, 0xe2, 0x49, 0xff, 0x5f, 0x59, 0x9b, 0x2a, 0x4c, 0x5a, 0x57, 0x16,
	0x46, 0xd0, 0x4e, 0x84, 0x00, 0xbe, 0x00, 0x4b, 0x2e, 0xe9, 0x47, 0xd4, 0x67, 0xea, 0xbb, 0xe2,
	0x47, 0xbc, 0x37, 0xff, 0x36, 0xd4, 0xdf, 0xf7, 0x7c, 0x76, 0x39, 0xe8, 0xf0, 0xfe, 0x51, 0x1f,
	0xe1, 0xea, 0xcf, 0x13, 0xea, 0xbe, 0xac, 0xf2, 0xe7, 0x9c, 0x56, 0xcc, 0x90, 0x4d, 0xb6, 0xa0,
	0xba, 0x06, 0xe1, 0xe4, 0xc2, 0x67, 0xeb, 0xff, 0xfc, 0x42, 0xcf, 0xfd, 0xe5, 0x4f, 0x4f, 0x96,
	0xc4, 0x5e, 0x0e, 0xd9, 0xe3, 0x7f, 0x6b, 0xa0, 0x90, 0xfe, 0x52, 0x80, 0xdb, 0x00, 0xb6, 0x71,
	0xed, 0xac, 0x75, 0xdc, 0xc0, 0x56, 0xfb, 0xf9, 0x79, 0xc3, 0x3a, 0xbb, 0x68, 0x36, 0x8b, 0x39,
	0xf8, 0x35, 0xf0, 0x28, 0x2b, 0x6f, 0x9a, 0x3f, 0xbe, 0x30, 0x8f, 0xcc, 0xf6, 0x73, 0x0b, 0x37,
	0x9a, 0xb5, 0xe7, 0x45, 0x0d, 0xbe, 0x07, 0xf6, 0xdf, 0x45, 0xf9, 0xc4, 0x6c, 0x7f, 0x78, 0x84,
	0x6b, 0x9f, 0x14, 0xe7, 0xe0, 0x2e, 0xd8, 0xce, 0xb2, 0xce, 0x1b, 0x27, 0xd6, 0xa9, 0x79, 0xd6,
	0x2e, 0xce, 0xc3, 0x32, 0xd8, 0xbd, 0x8b, 0x8d, 0x75, 0x17, 0xe0, 0x23, 0xb0, 0x73, 0x17, 0xff,
	0xc9, 0xa1, 0x54, 0xbf, 0x77, 0xd7, 0x47, 0x05, 0x8f, 0x6f, 0x58, 0xdc, 0x5d, 0xf8, 0xd5, 0x1f,
	0xca, 0xb9, 0xc7, 0xbf, 0xd6, 0xc0, 0xfa, 0xd4, 0x27, 0x08, 0xdc, 0x01, 0x5b, 0x8d, 0x9f, 0x36,
	0xea, 0x17, 0x6d, 0xf3, 0xe3, 0x33, 0xab, 0xd5, 0xae, 0xb5, 0x2f, 0x5a, 0x49, 0xec, 0x7b, 0xa0,
	0x74, 0x07, 0x6a, 0x5d, 0xd4, 0xeb, 0x8d, 0x56, 0xab, 0xa8, 0xcd, 0x44, 0x8f, 0x6b, 0x66, 0xf3,
	0x02, 0x37, 0x8a, 0x73, 0xdc, 0xe5, 0x19, 0x68, 0xb3, 0x69, 0xd4, 0xea, 0x1f, 0x15, 0xe7, 0x95,
	0x3f, 0x75, 0xb0, 0x74, 0x4a, 0x3d, 0x91, 0x7f, 0x04, 0xca, 0xa7, 0xad, 0x13, 0xe9, 0xfe, 0x69,
	0xa3, 0xd5, 0xaa, 0x9d, 0x34, 0x84, 0xff, 0x56, 0x12, 0x59, 0x31, 0x07, 0x37, 0x41, 0x71, 0x9a,
	0x53, 0xd4, 0x1e, 0xff, 0x02, 0x00, 0x23, 0xf6, 0x5d, 0x8f, 0x88, 0x7b, 0x36, 0x41, 0xd1, 0xc0,
	0xe6, 0xd1, 0x49, 0x23, 0x53, 0xc5, 0x1d, 0xb0, 0x95, 0x96, 0x8e, 0x0b, 0x54, 0xd4, 0xa6, 0x21,
	0x91, 0xba, 0xda, 0x45, 0xb3, 0x2d, 0x4b, 0x36, 0x0d, 0xc9, 0x73, 0x12, 0x80, 0x61, 0x7e, 0xf9,
	0xa6, 0xac, 0xbd, 0x7e, 0x53, 0xd6, 0xfe, 0xf1, 0xa6, 0xac, 0x7d, 0xfa, 0xb6, 0x9c, 0x7b, 0xfd,
	0xb6, 0x9c, 0xfb, 0xeb, 0xdb, 0x72, 0xee, 0x45, 0x35, 0xdd, 0xb4, 0xfc, 0x8b, 0xff, 0x49, 0x48,
	0xd8, 0xab, 0x28, 0x7e, 0x59, 0xa5, 0x5e, 0xf8, 0xe4, 0xfa, 0xb0, 0x7a, 0x33, 0xfe, 0x3f, 0x54,
	0x74, 0x70, 0x67, 0x51, 0xbc, 0x08, 0x1f, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x25, 0x59, 0x67,
	0x7a, 0xa3, 0x0e, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MessageExpiredTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MessageExpiredTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMessage(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TriggerSignCooldown, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TriggerSignCooldown):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintMessage(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FeeSplit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeSplit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeSplit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CelerTreasuryAddr) > 0 {
		i -= len(m.CelerTreasuryAddr)
		copy(dAtA[i:], m.CelerTreasuryAddr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CelerTreasuryAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.CelerTreasuryFeePerc != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CelerTreasuryFeePerc))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBytesAddr {
		i--
		if m.IsBytesAddr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.SrcTxHash) > 0 {
		i -= len(m.SrcTxHash)
		copy(dAtA[i:], m.SrcTxHash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SrcTxHash)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TransferRefId) > 0 {
		i -= len(m.TransferRefId)
		copy(dAtA[i:], m.TransferRefId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TransferRefId)))
		i--
		dAtA[i] = 0x5a
	}
	if m.LastReqTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastReqTime))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.ExecutionStatus != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExecutionStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.TransferType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TransferType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x22
	}
	if m.DstChainId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DstChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.SrcChainId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Transfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WdSeqNum != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WdSeqNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transfer != nil {
		{
			size, err := m.Transfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeeClaimDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeClaimDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeClaimDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.CumulativeFeeAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ChainId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeeClaimInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeClaimInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeClaimInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeClaimDetailsList) > 0 {
		for iNdEx := len(m.FeeClaimDetailsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeClaimDetailsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastClaimTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastClaimTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintMessage(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x12
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageBusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageBusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeSplitOverride != nil {
		{
			size, err := m.FeeSplitOverride.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FeeTokenSymbol) > 0 {
		i -= len(m.FeeTokenSymbol)
		copy(dAtA[i:], m.FeeTokenSymbol)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FeeTokenSymbol)))
		i--
		dAtA[i] = 0x12
	}
	if m.ContractInfo != nil {
		{
			size, err := m.ContractInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeSplitGlobal != nil {
		{
			size, err := m.FeeSplitGlobal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Deposit.Size()
		i -= size
		if _, err := m.Deposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.MessageBuses) > 0 {
		for iNdEx := len(m.MessageBuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MessageBuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TriggerSignCooldown)
	n += 1 + l + sovMessage(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MessageExpiredTime)
	n += 1 + l + sovMessage(uint64(l))
	return n
}

func (m *FeeSplit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CelerTreasuryFeePerc != 0 {
		n += 1 + sovMessage(uint64(m.CelerTreasuryFeePerc))
	}
	l = len(m.CelerTreasuryAddr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcChainId != 0 {
		n += 1 + sovMessage(uint64(m.SrcChainId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DstChainId != 0 {
		n += 1 + sovMessage(uint64(m.DstChainId))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TransferType != 0 {
		n += 1 + sovMessage(uint64(m.TransferType))
	}
	if m.ExecutionStatus != 0 {
		n += 1 + sovMessage(uint64(m.ExecutionStatus))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.LastReqTime != 0 {
		n += 1 + sovMessage(uint64(m.LastReqTime))
	}
	l = len(m.TransferRefId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SrcTxHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.IsBytesAddr {
		n += 2
	}
	return n
}

func (m *Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WdSeqNum != 0 {
		n += 1 + sovMessage(uint64(m.WdSeqNum))
	}
	return n
}

func (m *ExecutionContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = m.Message.Size()
	n += 1 + l + sovMessage(uint64(l))
	if m.Transfer != nil {
		l = m.Transfer.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *FeeClaimDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovMessage(uint64(m.ChainId))
	}
	l = m.CumulativeFeeAmount.Size()
	n += 1 + l + sovMessage(uint64(l))
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *FeeClaimInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastClaimTime)
	n += 1 + l + sovMessage(uint64(l))
	if len(m.FeeClaimDetailsList) > 0 {
		for _, e := range m.FeeClaimDetailsList {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *MessageBusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractInfo != nil {
		l = m.ContractInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.FeeTokenSymbol)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FeeSplitOverride != nil {
		l = m.FeeSplitOverride.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *MsgProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.MessageBuses) > 0 {
		for _, e := range m.MessageBuses {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = m.Deposit.Size()
	n += 1 + l + sovMessage(uint64(l))
	if m.FeeSplitGlobal != nil {
		l = m.FeeSplitGlobal.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerSignCooldown", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TriggerSignCooldown, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageExpiredTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MessageExpiredTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeSplit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeSplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeSplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelerTreasuryFeePerc", wireType)
			}
			m.CelerTreasuryFeePerc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CelerTreasuryFeePerc |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelerTreasuryAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CelerTreasuryAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainId", wireType)
			}
			m.DstChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferType", wireType)
			}
			m.TransferType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransferType |= TransferType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStatus", wireType)
			}
			m.ExecutionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionStatus |= ExecutionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, types.Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReqTime", wireType)
			}
			m.LastReqTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReqTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferRefId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferRefId = append(m.TransferRefId[:0], dAtA[iNdEx:postIndex]...)
			if m.TransferRefId == nil {
				m.TransferRefId = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBytesAddr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBytesAddr = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WdSeqNum", wireType)
			}
			m.WdSeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WdSeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = append(m.MessageId[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageId == nil {
				m.MessageId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transfer == nil {
				m.Transfer = &Transfer{}
			}
			if err := m.Transfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeClaimDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeClaimDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeClaimDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeFeeAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CumulativeFeeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, types.Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeClaimInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeClaimInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeClaimInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastClaimTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastClaimTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeClaimDetailsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeClaimDetailsList = append(m.FeeClaimDetailsList, FeeClaimDetails{})
			if err := m.FeeClaimDetailsList[len(m.FeeClaimDetailsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageBusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractInfo == nil {
				m.ContractInfo = &types.ContractInfo{}
			}
			if err := m.ContractInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeSplitOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeSplitOverride == nil {
				m.FeeSplitOverride = &FeeSplit{}
			}
			if err := m.FeeSplitOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageBuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageBuses = append(m.MessageBuses, &MessageBusInfo{})
			if err := m.MessageBuses[len(m.MessageBuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeSplitGlobal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeSplitGlobal == nil {
				m.FeeSplitGlobal = &FeeSplit{}
			}
			if err := m.FeeSplitGlobal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
