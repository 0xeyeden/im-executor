// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/pegbridge/v1/pegbridge.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	types "github.com/celer-network/im-executor/sgn-v2/common/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of params for the pegbridge module.
type Params struct {
	// trigger_sign_cooldown defines the minimal time between two trigger signing requests.
	TriggerSignCooldown time.Duration `protobuf:"bytes,1,opt,name=trigger_sign_cooldown,json=triggerSignCooldown,proto3,stdduration" json:"trigger_sign_cooldown,omitempty" yaml:"trigger_sign_cooldown"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetTriggerSignCooldown() time.Duration {
	if m != nil {
		return m.TriggerSignCooldown
	}
	return 0
}

type ContractInfo struct {
	Contract types.ContractInfo `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract" yaml:"pegged_token_bridges"`
	Version  uint32             `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty" yaml:"version"`
}

func (m *ContractInfo) Reset()         { *m = ContractInfo{} }
func (m *ContractInfo) String() string { return proto.CompactTextString(m) }
func (*ContractInfo) ProtoMessage()    {}
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{1}
}
func (m *ContractInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractInfo.Merge(m, src)
}
func (m *ContractInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContractInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContractInfo proto.InternalMessageInfo

func (m *ContractInfo) GetContract() types.ContractInfo {
	if m != nil {
		return m.Contract
	}
	return types.ContractInfo{}
}

func (m *ContractInfo) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// PegConfig describes the pegbridge specific configs.
type PegConfig struct {
	// pegged_token_bridges defines the PeggedTokenBridge contracts.
	PeggedTokenBridges []ContractInfo `protobuf:"bytes,1,rep,name=pegged_token_bridges,json=peggedTokenBridges,proto3" json:"pegged_token_bridges" yaml:"pegged_token_bridges"`
	// original_token_vaults defines the OriginalTokenVault contracts.
	OriginalTokenVaults []ContractInfo `protobuf:"bytes,2,rep,name=original_token_vaults,json=originalTokenVaults,proto3" json:"original_token_vaults" yaml:"original_token_vaults"`
	// orig_pegged_pairs defines the original-pegged token pairs.
	OrigPeggedPairs []OrigPeggedPair `protobuf:"bytes,3,rep,name=orig_pegged_pairs,json=origPeggedPairs,proto3" json:"orig_pegged_pairs" yaml:"orig_pegged_pairs"`
	FeeSplitGlobal  *FeeSplit        `protobuf:"bytes,4,opt,name=fee_split_global,json=feeSplitGlobal,proto3" json:"fee_split_global,omitempty" yaml:"fee_split_global"`
}

func (m *PegConfig) Reset()         { *m = PegConfig{} }
func (m *PegConfig) String() string { return proto.CompactTextString(m) }
func (*PegConfig) ProtoMessage()    {}
func (*PegConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{2}
}
func (m *PegConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PegConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PegConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PegConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PegConfig.Merge(m, src)
}
func (m *PegConfig) XXX_Size() int {
	return m.Size()
}
func (m *PegConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PegConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PegConfig proto.InternalMessageInfo

func (m *PegConfig) GetPeggedTokenBridges() []ContractInfo {
	if m != nil {
		return m.PeggedTokenBridges
	}
	return nil
}

func (m *PegConfig) GetOriginalTokenVaults() []ContractInfo {
	if m != nil {
		return m.OriginalTokenVaults
	}
	return nil
}

func (m *PegConfig) GetOrigPeggedPairs() []OrigPeggedPair {
	if m != nil {
		return m.OrigPeggedPairs
	}
	return nil
}

func (m *PegConfig) GetFeeSplitGlobal() *FeeSplit {
	if m != nil {
		return m.FeeSplitGlobal
	}
	return nil
}

// OrigPeggedPair describes a pair of original-pegged ERC20 tokens on two EVM-compatible chains.
type OrigPeggedPair struct {
	// orig defines the original token.
	Orig types.ERC20Token `protobuf:"bytes,1,opt,name=orig,proto3" json:"orig" yaml:"orig"`
	// pegged defines the pegged token.
	Pegged types.ERC20Token `protobuf:"bytes,2,opt,name=pegged,proto3" json:"pegged" yaml:"pegged"`
	// mint_fee_bps defines the fee percentage in points to mint pegged tokens. 1 pip = 0.0001%
	MintFeePips uint32 `protobuf:"varint,3,opt,name=mint_fee_pips,json=mintFeePips,proto3" json:"mint_fee_pips,omitempty" yaml:"mint_fee_pips"`
	// max_mint_fee defines the max mint fee chargeable.
	MaxMintFee string `protobuf:"bytes,4,opt,name=max_mint_fee,json=maxMintFee,proto3" json:"max_mint_fee,omitempty" yaml:"max_mint_fee"`
	// burn_fee_bps defines the fee percentage in points to burn pegged tokens. 1 pip = 0.0001%
	BurnFeePips uint32 `protobuf:"varint,5,opt,name=burn_fee_pips,json=burnFeePips,proto3" json:"burn_fee_pips,omitempty" yaml:"burn_fee_pips"`
	// max_burn_fee defines the max burn fee chargeable.
	MaxBurnFee string `protobuf:"bytes,6,opt,name=max_burn_fee,json=maxBurnFee,proto3" json:"max_burn_fee,omitempty" yaml:"max_burn_fee"`
	// supply_cap defines the max mint amount of the bridge used by this pair
	SupplyCap            string    `protobuf:"bytes,7,opt,name=supply_cap,json=supplyCap,proto3" json:"supply_cap,omitempty" yaml:"supply_cap"`
	VaultVersion         uint32    `protobuf:"varint,8,opt,name=vault_version,json=vaultVersion,proto3" json:"vault_version,omitempty" yaml:"vault_version"`
	BridgeVersion        uint32    `protobuf:"varint,9,opt,name=bridge_version,json=bridgeVersion,proto3" json:"bridge_version,omitempty" yaml:"bridge_version"`
	MintFeeSplitOverride *FeeSplit `protobuf:"bytes,10,opt,name=mint_fee_split_override,json=mintFeeSplitOverride,proto3" json:"mint_fee_split_override,omitempty" yaml:"mint_fee_split_override"`
	BurnFeeSplitOverride *FeeSplit `protobuf:"bytes,11,opt,name=burn_fee_split_override,json=burnFeeSplitOverride,proto3" json:"burn_fee_split_override,omitempty" yaml:"burn_fee_split_override"`
}

func (m *OrigPeggedPair) Reset()         { *m = OrigPeggedPair{} }
func (m *OrigPeggedPair) String() string { return proto.CompactTextString(m) }
func (*OrigPeggedPair) ProtoMessage()    {}
func (*OrigPeggedPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{3}
}
func (m *OrigPeggedPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrigPeggedPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrigPeggedPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrigPeggedPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrigPeggedPair.Merge(m, src)
}
func (m *OrigPeggedPair) XXX_Size() int {
	return m.Size()
}
func (m *OrigPeggedPair) XXX_DiscardUnknown() {
	xxx_messageInfo_OrigPeggedPair.DiscardUnknown(m)
}

var xxx_messageInfo_OrigPeggedPair proto.InternalMessageInfo

func (m *OrigPeggedPair) GetOrig() types.ERC20Token {
	if m != nil {
		return m.Orig
	}
	return types.ERC20Token{}
}

func (m *OrigPeggedPair) GetPegged() types.ERC20Token {
	if m != nil {
		return m.Pegged
	}
	return types.ERC20Token{}
}

func (m *OrigPeggedPair) GetMintFeePips() uint32 {
	if m != nil {
		return m.MintFeePips
	}
	return 0
}

func (m *OrigPeggedPair) GetMaxMintFee() string {
	if m != nil {
		return m.MaxMintFee
	}
	return ""
}

func (m *OrigPeggedPair) GetBurnFeePips() uint32 {
	if m != nil {
		return m.BurnFeePips
	}
	return 0
}

func (m *OrigPeggedPair) GetMaxBurnFee() string {
	if m != nil {
		return m.MaxBurnFee
	}
	return ""
}

func (m *OrigPeggedPair) GetSupplyCap() string {
	if m != nil {
		return m.SupplyCap
	}
	return ""
}

func (m *OrigPeggedPair) GetVaultVersion() uint32 {
	if m != nil {
		return m.VaultVersion
	}
	return 0
}

func (m *OrigPeggedPair) GetBridgeVersion() uint32 {
	if m != nil {
		return m.BridgeVersion
	}
	return 0
}

func (m *OrigPeggedPair) GetMintFeeSplitOverride() *FeeSplit {
	if m != nil {
		return m.MintFeeSplitOverride
	}
	return nil
}

func (m *OrigPeggedPair) GetBurnFeeSplitOverride() *FeeSplit {
	if m != nil {
		return m.BurnFeeSplitOverride
	}
	return nil
}

// PeggedOrigIndex describes the reverse lookup index from a pegged token to the original token, if exists.
type PeggedOrigIndex struct {
	// pegged defines the pegged token info.
	Pegged types.ContractInfo `protobuf:"bytes,1,opt,name=pegged,proto3" json:"pegged" yaml:"pegged"`
	// orig defines the original token info.
	Orig types.ContractInfo `protobuf:"bytes,2,opt,name=orig,proto3" json:"orig" yaml:"orig"`
}

func (m *PeggedOrigIndex) Reset()         { *m = PeggedOrigIndex{} }
func (m *PeggedOrigIndex) String() string { return proto.CompactTextString(m) }
func (*PeggedOrigIndex) ProtoMessage()    {}
func (*PeggedOrigIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{4}
}
func (m *PeggedOrigIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeggedOrigIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeggedOrigIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeggedOrigIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeggedOrigIndex.Merge(m, src)
}
func (m *PeggedOrigIndex) XXX_Size() int {
	return m.Size()
}
func (m *PeggedOrigIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_PeggedOrigIndex.DiscardUnknown(m)
}

var xxx_messageInfo_PeggedOrigIndex proto.InternalMessageInfo

func (m *PeggedOrigIndex) GetPegged() types.ContractInfo {
	if m != nil {
		return m.Pegged
	}
	return types.ContractInfo{}
}

func (m *PeggedOrigIndex) GetOrig() types.ContractInfo {
	if m != nil {
		return m.Orig
	}
	return types.ContractInfo{}
}

// Celer treasury is an EOA or a multi-sig wallet.
// The treasury will share a portion of the peg bridge percentage fee if a config exists.
// Not that celer_treasury_fee_perc should not exceed 100. The left portion is for sgn.
type FeeSplit struct {
	CelerTreasuryFeePerc uint32 `protobuf:"varint,1,opt,name=celer_treasury_fee_perc,json=celerTreasuryFeePerc,proto3" json:"celer_treasury_fee_perc,omitempty"`
	CelerTreasuryAddr    string `protobuf:"bytes,2,opt,name=celer_treasury_addr,json=celerTreasuryAddr,proto3" json:"celer_treasury_addr,omitempty"`
}

func (m *FeeSplit) Reset()         { *m = FeeSplit{} }
func (m *FeeSplit) String() string { return proto.CompactTextString(m) }
func (*FeeSplit) ProtoMessage()    {}
func (*FeeSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{5}
}
func (m *FeeSplit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeSplit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeSplit.Merge(m, src)
}
func (m *FeeSplit) XXX_Size() int {
	return m.Size()
}
func (m *FeeSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeSplit.DiscardUnknown(m)
}

var xxx_messageInfo_FeeSplit proto.InternalMessageInfo

func (m *FeeSplit) GetCelerTreasuryFeePerc() uint32 {
	if m != nil {
		return m.CelerTreasuryFeePerc
	}
	return 0
}

func (m *FeeSplit) GetCelerTreasuryAddr() string {
	if m != nil {
		return m.CelerTreasuryAddr
	}
	return ""
}

// DepositInfo describes the info for an on-chain deposit tx submitted by a user to OriginalTokenVaults.
type DepositInfo struct {
	// chain_id defines the EVM chain ID on which the deposit happened.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// deposit_id defines the deposit ID.
	DepositId []byte `protobuf:"bytes,2,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty" yaml:"deposit_id"`
	// mint_id defines the corresponding mint ID.
	MintId       []byte `protobuf:"bytes,3,opt,name=mint_id,json=mintId,proto3" json:"mint_id,omitempty" yaml:"mint_id"`
	VaultVersion uint32 `protobuf:"varint,4,opt,name=vault_version,json=vaultVersion,proto3" json:"vault_version,omitempty" yaml:"vault_version"`
}

func (m *DepositInfo) Reset()      { *m = DepositInfo{} }
func (*DepositInfo) ProtoMessage() {}
func (*DepositInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{6}
}
func (m *DepositInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositInfo.Merge(m, src)
}
func (m *DepositInfo) XXX_Size() int {
	return m.Size()
}
func (m *DepositInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DepositInfo proto.InternalMessageInfo

func (m *DepositInfo) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *DepositInfo) GetDepositId() []byte {
	if m != nil {
		return m.DepositId
	}
	return nil
}

func (m *DepositInfo) GetMintId() []byte {
	if m != nil {
		return m.MintId
	}
	return nil
}

func (m *DepositInfo) GetVaultVersion() uint32 {
	if m != nil {
		return m.VaultVersion
	}
	return 0
}

// MintInfo describes the info for an on-chain mint request to be submitted to PeggedTokenBridge.
type MintInfo struct {
	// chain_id defines the EVM chain ID to mint the pegged token.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// mint_proto_bytes defines the serialized mint protobuf to be submitted to PeggedTokenBridge.
	MintProtoBytes []byte `protobuf:"bytes,2,opt,name=mint_proto_bytes,json=mintProtoBytes,proto3" json:"mint_proto_bytes,omitempty" yaml:"mint_proto_bytes"`
	// signatures defines the signatures to be verified on PeggedTokenBridge.
	Signatures []types.Signature `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures" yaml:"signatures"`
	// base_fee defines the base fee charged for the mintage.
	BaseFee string `protobuf:"bytes,4,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty" yaml:"base_fee"`
	// percentage_fee defines the percentage fee charged for the mintage.
	PercentageFee string `protobuf:"bytes,5,opt,name=percentage_fee,json=percentageFee,proto3" json:"percentage_fee,omitempty" yaml:"percentage_fee"`
	// success defines whether the minting has been completed on-chain.
	Success       bool   `protobuf:"varint,6,opt,name=success,proto3" json:"success,omitempty" yaml:"success"`
	LastReqTime   int64  `protobuf:"varint,7,opt,name=last_req_time,json=lastReqTime,proto3" json:"last_req_time,omitempty"`
	BridgeVersion uint32 `protobuf:"varint,8,opt,name=bridge_version,json=bridgeVersion,proto3" json:"bridge_version,omitempty" yaml:"bridge_version"`
}

func (m *MintInfo) Reset()      { *m = MintInfo{} }
func (*MintInfo) ProtoMessage() {}
func (*MintInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{7}
}
func (m *MintInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintInfo.Merge(m, src)
}
func (m *MintInfo) XXX_Size() int {
	return m.Size()
}
func (m *MintInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MintInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MintInfo proto.InternalMessageInfo

func (m *MintInfo) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MintInfo) GetMintProtoBytes() []byte {
	if m != nil {
		return m.MintProtoBytes
	}
	return nil
}

func (m *MintInfo) GetSignatures() []types.Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *MintInfo) GetBaseFee() string {
	if m != nil {
		return m.BaseFee
	}
	return ""
}

func (m *MintInfo) GetPercentageFee() string {
	if m != nil {
		return m.PercentageFee
	}
	return ""
}

func (m *MintInfo) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MintInfo) GetLastReqTime() int64 {
	if m != nil {
		return m.LastReqTime
	}
	return 0
}

func (m *MintInfo) GetBridgeVersion() uint32 {
	if m != nil {
		return m.BridgeVersion
	}
	return 0
}

// BurnInfo describes the info for an on-chain burn tx submitted by a user to PeggedTokenBridge.
type BurnInfo struct {
	// chain_id defines the EVM chain ID on which the burn happened.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// burn_id defines the burn ID.
	BurnId []byte `protobuf:"bytes,2,opt,name=burn_id,json=burnId,proto3" json:"burn_id,omitempty" yaml:"burn_id"`
	// withdraw_id defines the corresponding withdraw ID.
	WithdrawId []byte `protobuf:"bytes,3,opt,name=withdraw_id,json=withdrawId,proto3" json:"withdraw_id,omitempty" yaml:"withdraw_id"`
	// mint_id defines the corresponding mint ID.
	MintId        []byte `protobuf:"bytes,4,opt,name=mint_id,json=mintId,proto3" json:"mint_id,omitempty" yaml:"mint_id"`
	BridgeVersion uint32 `protobuf:"varint,5,opt,name=bridge_version,json=bridgeVersion,proto3" json:"bridge_version,omitempty" yaml:"bridge_version"`
}

func (m *BurnInfo) Reset()      { *m = BurnInfo{} }
func (*BurnInfo) ProtoMessage() {}
func (*BurnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{8}
}
func (m *BurnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnInfo.Merge(m, src)
}
func (m *BurnInfo) XXX_Size() int {
	return m.Size()
}
func (m *BurnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BurnInfo proto.InternalMessageInfo

func (m *BurnInfo) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BurnInfo) GetBurnId() []byte {
	if m != nil {
		return m.BurnId
	}
	return nil
}

func (m *BurnInfo) GetWithdrawId() []byte {
	if m != nil {
		return m.WithdrawId
	}
	return nil
}

func (m *BurnInfo) GetMintId() []byte {
	if m != nil {
		return m.MintId
	}
	return nil
}

func (m *BurnInfo) GetBridgeVersion() uint32 {
	if m != nil {
		return m.BridgeVersion
	}
	return 0
}

// WithdrawInfo describes the info for an on-chain withdraw request to be submitted to OriginalTokenVault.
type WithdrawInfo struct {
	// chain_id defines the EVM chain ID to withdraw the original token
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// withdraw_proto_bytes defines the serialized withdraw protobuf to be submitted to OriginalTokenVault.
	WithdrawProtoBytes []byte `protobuf:"bytes,2,opt,name=withdraw_proto_bytes,json=withdrawProtoBytes,proto3" json:"withdraw_proto_bytes,omitempty" yaml:"withdraw_proto_bytes"`
	// signatures defines the signatures to be verified on OriginalTokenVault.
	Signatures []types.Signature `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures" yaml:"signatures"`
	// base_fee defines the base fee charged for the withdrawal.
	BaseFee string `protobuf:"bytes,4,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty" yaml:"base_fee"`
	// percentage_fee defines the percentage fee charged for the withdrawal.
	PercentageFee string `protobuf:"bytes,5,opt,name=percentage_fee,json=percentageFee,proto3" json:"percentage_fee,omitempty" yaml:"percentage_fee"`
	// success defines whether the withdrawal has been completed on-chain.
	Success      bool   `protobuf:"varint,6,opt,name=success,proto3" json:"success,omitempty" yaml:"success"`
	LastReqTime  int64  `protobuf:"varint,7,opt,name=last_req_time,json=lastReqTime,proto3" json:"last_req_time,omitempty"`
	VaultVersion uint32 `protobuf:"varint,8,opt,name=vault_version,json=vaultVersion,proto3" json:"vault_version,omitempty" yaml:"vault_version"`
}

func (m *WithdrawInfo) Reset()      { *m = WithdrawInfo{} }
func (*WithdrawInfo) ProtoMessage() {}
func (*WithdrawInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{9}
}
func (m *WithdrawInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawInfo.Merge(m, src)
}
func (m *WithdrawInfo) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawInfo proto.InternalMessageInfo

func (m *WithdrawInfo) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *WithdrawInfo) GetWithdrawProtoBytes() []byte {
	if m != nil {
		return m.WithdrawProtoBytes
	}
	return nil
}

func (m *WithdrawInfo) GetSignatures() []types.Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *WithdrawInfo) GetBaseFee() string {
	if m != nil {
		return m.BaseFee
	}
	return ""
}

func (m *WithdrawInfo) GetPercentageFee() string {
	if m != nil {
		return m.PercentageFee
	}
	return ""
}

func (m *WithdrawInfo) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *WithdrawInfo) GetLastReqTime() int64 {
	if m != nil {
		return m.LastReqTime
	}
	return 0
}

func (m *WithdrawInfo) GetVaultVersion() uint32 {
	if m != nil {
		return m.VaultVersion
	}
	return 0
}

// FeeClaimInfo describes the info for a pegbridge fee claim.
type FeeClaimInfo struct {
	// withdraw_id defines the corresponding withdraw ID
	WithdrawId   []byte `protobuf:"bytes,1,opt,name=withdraw_id,json=withdrawId,proto3" json:"withdraw_id,omitempty" yaml:"withdraw_id"`
	VaultVersion uint32 `protobuf:"varint,2,opt,name=vault_version,json=vaultVersion,proto3" json:"vault_version,omitempty" yaml:"vault_version"`
}

func (m *FeeClaimInfo) Reset()         { *m = FeeClaimInfo{} }
func (m *FeeClaimInfo) String() string { return proto.CompactTextString(m) }
func (*FeeClaimInfo) ProtoMessage()    {}
func (*FeeClaimInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{10}
}
func (m *FeeClaimInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeClaimInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeClaimInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeClaimInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeClaimInfo.Merge(m, src)
}
func (m *FeeClaimInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeeClaimInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeClaimInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeeClaimInfo proto.InternalMessageInfo

func (m *FeeClaimInfo) GetWithdrawId() []byte {
	if m != nil {
		return m.WithdrawId
	}
	return nil
}

func (m *FeeClaimInfo) GetVaultVersion() uint32 {
	if m != nil {
		return m.VaultVersion
	}
	return 0
}

// MintOnChain describes the mint protobuf to be submitted on-chain.
type MintOnChain struct {
	// token defines the token address.
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// account defines the account address that the tokens should be mint to.
	Account []byte `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// amount defines the mint amount.
	Amount []byte `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// depositor defines the account address that made deposit at the original token chain.
	// Not applicable to refund claims and governance-triggered mints.
	Depositor []byte `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// ref_chain_id defines the reference chain ID, taking values of:
	// 1. The common case of deposit-mint: the chain ID on which the corresponding deposit happened;
	// 2. Pegbridge refund claim: the chain ID on which the corresponding burn happened;
	// 3. Governance-triggered mint: the chain ID on which the minting will happen.
	RefChainId uint64 `protobuf:"varint,5,opt,name=ref_chain_id,json=refChainId,proto3" json:"ref_chain_id,omitempty"`
	// ref_id defines a unique reference ID, taking values of:
	// 1. The common case of deposit-mint: the deposit ID;
	// 2. Refund for wrong burn: the burn ID;
	// 3. Governance-triggered mint: ID as needed.
	RefId []byte `protobuf:"bytes,6,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
}

func (m *MintOnChain) Reset()      { *m = MintOnChain{} }
func (*MintOnChain) ProtoMessage() {}
func (*MintOnChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{11}
}
func (m *MintOnChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintOnChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintOnChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintOnChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintOnChain.Merge(m, src)
}
func (m *MintOnChain) XXX_Size() int {
	return m.Size()
}
func (m *MintOnChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MintOnChain.DiscardUnknown(m)
}

var xxx_messageInfo_MintOnChain proto.InternalMessageInfo

func (m *MintOnChain) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *MintOnChain) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *MintOnChain) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MintOnChain) GetDepositor() []byte {
	if m != nil {
		return m.Depositor
	}
	return nil
}

func (m *MintOnChain) GetRefChainId() uint64 {
	if m != nil {
		return m.RefChainId
	}
	return 0
}

func (m *MintOnChain) GetRefId() []byte {
	if m != nil {
		return m.RefId
	}
	return nil
}

// WithdrawOnChain describes the withdraw protobuf to be submitted on-chain.
type WithdrawOnChain struct {
	// token defines the token address. for non-evm chains, value meaning is different
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// receiver defines the account address that the tokens should be withdrawn to.
	Receiver []byte `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// amount defines the withdraw amount.
	Amount []byte `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// burn_account defines the account that burned the pegged token.
	// 0xFF00000000000000000000000000000000000000 for vault migration
	// Not applicable to fee claims, refund claims and other governance-triggered withdrawals.
	BurnAccount []byte `protobuf:"bytes,4,opt,name=burn_account,json=burnAccount,proto3" json:"burn_account,omitempty"`
	// ref_chain_id defines the reference chain ID, taking values of:
	// 1. The common case of burn-withdraw: the chain ID on which the corresponding burn happened;
	// 2. Pegbridge fee claim: zero / Not applicable;
	// 3. Pegbridge refund claim: the chain ID on which the corresponding deposit happened;
	// 4. Other governance-triggered withdrawals: the chain ID on which the withdrawal will happen.
	RefChainId uint64 `protobuf:"varint,5,opt,name=ref_chain_id,json=refChainId,proto3" json:"ref_chain_id,omitempty"`
	// ref_id defines a unique reference ID, taking values of:
	// 1. The common case of burn-withdraw: the burn ID;
	// 2. Pegbridge fee claim: a per-account nonce;
	// 3. Refund for wrong deposit: the deposit ID;
	// 4. Governance-triggered withdrawal: ID as needed.
	RefId []byte `protobuf:"bytes,6,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
}

func (m *WithdrawOnChain) Reset()      { *m = WithdrawOnChain{} }
func (*WithdrawOnChain) ProtoMessage() {}
func (*WithdrawOnChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{12}
}
func (m *WithdrawOnChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawOnChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawOnChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawOnChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawOnChain.Merge(m, src)
}
func (m *WithdrawOnChain) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawOnChain) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawOnChain.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawOnChain proto.InternalMessageInfo

func (m *WithdrawOnChain) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *WithdrawOnChain) GetReceiver() []byte {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *WithdrawOnChain) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *WithdrawOnChain) GetBurnAccount() []byte {
	if m != nil {
		return m.BurnAccount
	}
	return nil
}

func (m *WithdrawOnChain) GetRefChainId() uint64 {
	if m != nil {
		return m.RefChainId
	}
	return 0
}

func (m *WithdrawOnChain) GetRefId() []byte {
	if m != nil {
		return m.RefId
	}
	return nil
}

type MigrationInfo struct {
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// token to migrate
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty" yaml:"token"`
	// old contract version
	FromVersion uint32 `protobuf:"varint,3,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty" yaml:"from_version"`
	// new contract version
	ToVersion uint32 `protobuf:"varint,4,opt,name=to_version,json=toVersion,proto3" json:"to_version,omitempty" yaml:"to_version"`
	// address of the contract to migrate to
	ToAddress string `protobuf:"bytes,5,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty" yaml:"to_address"`
	// eth address of the validator who will execute the migration
	Executor string `protobuf:"bytes,6,opt,name=executor,proto3" json:"executor,omitempty" yaml:"executor"`
}

func (m *MigrationInfo) Reset()         { *m = MigrationInfo{} }
func (m *MigrationInfo) String() string { return proto.CompactTextString(m) }
func (*MigrationInfo) ProtoMessage()    {}
func (*MigrationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{13}
}
func (m *MigrationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MigrationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MigrationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MigrationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrationInfo.Merge(m, src)
}
func (m *MigrationInfo) XXX_Size() int {
	return m.Size()
}
func (m *MigrationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MigrationInfo proto.InternalMessageInfo

func (m *MigrationInfo) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MigrationInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *MigrationInfo) GetFromVersion() uint32 {
	if m != nil {
		return m.FromVersion
	}
	return 0
}

func (m *MigrationInfo) GetToVersion() uint32 {
	if m != nil {
		return m.ToVersion
	}
	return 0
}

func (m *MigrationInfo) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *MigrationInfo) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

type VaultMigration struct {
	MigrationInfo MigrationInfo `protobuf:"bytes,1,opt,name=migration_info,json=migrationInfo,proto3" json:"migration_info" yaml:"migration_info"`
	// deadline (in unix sec) to complete migration
	Deadline int64 `protobuf:"varint,7,opt,name=deadline,proto3" json:"deadline,omitempty" yaml:"deadline"`
	// associated withdraw ids, use string for easy printing
	WithdrawIds []string `protobuf:"bytes,8,rep,name=withdraw_ids,json=withdrawIds,proto3" json:"withdraw_ids,omitempty" yaml:"withdraw_ids"`
}

func (m *VaultMigration) Reset()         { *m = VaultMigration{} }
func (m *VaultMigration) String() string { return proto.CompactTextString(m) }
func (*VaultMigration) ProtoMessage()    {}
func (*VaultMigration) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{14}
}
func (m *VaultMigration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultMigration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultMigration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultMigration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultMigration.Merge(m, src)
}
func (m *VaultMigration) XXX_Size() int {
	return m.Size()
}
func (m *VaultMigration) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultMigration.DiscardUnknown(m)
}

var xxx_messageInfo_VaultMigration proto.InternalMessageInfo

func (m *VaultMigration) GetMigrationInfo() MigrationInfo {
	if m != nil {
		return m.MigrationInfo
	}
	return MigrationInfo{}
}

func (m *VaultMigration) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *VaultMigration) GetWithdrawIds() []string {
	if m != nil {
		return m.WithdrawIds
	}
	return nil
}

// PegProposal describes a pegbridge config proposal, note it must be a whole json
type PegProposal struct {
	Title       string     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PegConfig   *PegConfig `protobuf:"bytes,3,opt,name=peg_config,json=pegConfig,proto3" json:"peg_config,omitempty"`
	// deposit defines the amount for MsgSubmitProposal
	Deposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=deposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposit"`
}

func (m *PegProposal) Reset()         { *m = PegProposal{} }
func (m *PegProposal) String() string { return proto.CompactTextString(m) }
func (*PegProposal) ProtoMessage()    {}
func (*PegProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{15}
}
func (m *PegProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PegProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PegProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PegProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PegProposal.Merge(m, src)
}
func (m *PegProposal) XXX_Size() int {
	return m.Size()
}
func (m *PegProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_PegProposal.DiscardUnknown(m)
}

var xxx_messageInfo_PegProposal proto.InternalMessageInfo

func (m *PegProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PegProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PegProposal) GetPegConfig() *PegConfig {
	if m != nil {
		return m.PegConfig
	}
	return nil
}

type PairDeleteProposal struct {
	Title        string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description  string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PairToDelete *OrigPeggedPair `protobuf:"bytes,3,opt,name=pair_to_delete,json=pairToDelete,proto3" json:"pair_to_delete,omitempty"`
	// deposit defines the amount for MsgSubmitProposal
	Deposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=deposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposit"`
}

func (m *PairDeleteProposal) Reset()         { *m = PairDeleteProposal{} }
func (m *PairDeleteProposal) String() string { return proto.CompactTextString(m) }
func (*PairDeleteProposal) ProtoMessage()    {}
func (*PairDeleteProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{16}
}
func (m *PairDeleteProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairDeleteProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairDeleteProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairDeleteProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairDeleteProposal.Merge(m, src)
}
func (m *PairDeleteProposal) XXX_Size() int {
	return m.Size()
}
func (m *PairDeleteProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_PairDeleteProposal.DiscardUnknown(m)
}

var xxx_messageInfo_PairDeleteProposal proto.InternalMessageInfo

func (m *PairDeleteProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PairDeleteProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PairDeleteProposal) GetPairToDelete() *OrigPeggedPair {
	if m != nil {
		return m.PairToDelete
	}
	return nil
}

type OriginalTokenVaultDeleteProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ChainId     uint64 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Version     uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// deposit defines the amount for MsgSubmitProposal
	Deposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=deposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposit"`
}

func (m *OriginalTokenVaultDeleteProposal) Reset()         { *m = OriginalTokenVaultDeleteProposal{} }
func (m *OriginalTokenVaultDeleteProposal) String() string { return proto.CompactTextString(m) }
func (*OriginalTokenVaultDeleteProposal) ProtoMessage()    {}
func (*OriginalTokenVaultDeleteProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{17}
}
func (m *OriginalTokenVaultDeleteProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginalTokenVaultDeleteProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OriginalTokenVaultDeleteProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OriginalTokenVaultDeleteProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginalTokenVaultDeleteProposal.Merge(m, src)
}
func (m *OriginalTokenVaultDeleteProposal) XXX_Size() int {
	return m.Size()
}
func (m *OriginalTokenVaultDeleteProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginalTokenVaultDeleteProposal.DiscardUnknown(m)
}

var xxx_messageInfo_OriginalTokenVaultDeleteProposal proto.InternalMessageInfo

func (m *OriginalTokenVaultDeleteProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *OriginalTokenVaultDeleteProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *OriginalTokenVaultDeleteProposal) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *OriginalTokenVaultDeleteProposal) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type PeggedTokenBridgeDeleteProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ChainId     uint64 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Version     uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// deposit defines the amount for MsgSubmitProposal
	Deposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=deposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposit"`
}

func (m *PeggedTokenBridgeDeleteProposal) Reset()         { *m = PeggedTokenBridgeDeleteProposal{} }
func (m *PeggedTokenBridgeDeleteProposal) String() string { return proto.CompactTextString(m) }
func (*PeggedTokenBridgeDeleteProposal) ProtoMessage()    {}
func (*PeggedTokenBridgeDeleteProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{18}
}
func (m *PeggedTokenBridgeDeleteProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeggedTokenBridgeDeleteProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeggedTokenBridgeDeleteProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeggedTokenBridgeDeleteProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeggedTokenBridgeDeleteProposal.Merge(m, src)
}
func (m *PeggedTokenBridgeDeleteProposal) XXX_Size() int {
	return m.Size()
}
func (m *PeggedTokenBridgeDeleteProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_PeggedTokenBridgeDeleteProposal.DiscardUnknown(m)
}

var xxx_messageInfo_PeggedTokenBridgeDeleteProposal proto.InternalMessageInfo

func (m *PeggedTokenBridgeDeleteProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PeggedTokenBridgeDeleteProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PeggedTokenBridgeDeleteProposal) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *PeggedTokenBridgeDeleteProposal) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// TotalSupplyUpdateProposal describes a proposal to update the current totalSupply of a certain pair.
// No need to supply a full-content pair, only orig and pegged will be used.
// This proposal is only used for backward compatibility (manually set the total supply for pegged tokens
// that were already supported before this supply tracking feature is launched).
type TotalSupplyUpdateProposal struct {
	Title       string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Pair        *OrigPeggedPair `protobuf:"bytes,3,opt,name=pair,proto3" json:"pair,omitempty"`
	// total supply amount that will be set for the pair
	TotalSupply string `protobuf:"bytes,4,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	// deposit defines the amount for MsgSubmitProposal
	Deposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=deposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposit"`
}

func (m *TotalSupplyUpdateProposal) Reset()         { *m = TotalSupplyUpdateProposal{} }
func (m *TotalSupplyUpdateProposal) String() string { return proto.CompactTextString(m) }
func (*TotalSupplyUpdateProposal) ProtoMessage()    {}
func (*TotalSupplyUpdateProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{19}
}
func (m *TotalSupplyUpdateProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalSupplyUpdateProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalSupplyUpdateProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalSupplyUpdateProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalSupplyUpdateProposal.Merge(m, src)
}
func (m *TotalSupplyUpdateProposal) XXX_Size() int {
	return m.Size()
}
func (m *TotalSupplyUpdateProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalSupplyUpdateProposal.DiscardUnknown(m)
}

var xxx_messageInfo_TotalSupplyUpdateProposal proto.InternalMessageInfo

func (m *TotalSupplyUpdateProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TotalSupplyUpdateProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TotalSupplyUpdateProposal) GetPair() *OrigPeggedPair {
	if m != nil {
		return m.Pair
	}
	return nil
}

func (m *TotalSupplyUpdateProposal) GetTotalSupply() string {
	if m != nil {
		return m.TotalSupply
	}
	return ""
}

type VaultMigrationProposal struct {
	Title         string                                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MigrationInfo MigrationInfo                          `protobuf:"bytes,3,opt,name=migration_info,json=migrationInfo,proto3" json:"migration_info"`
	Duration      int64                                  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Deposit       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=deposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposit"`
}

func (m *VaultMigrationProposal) Reset()         { *m = VaultMigrationProposal{} }
func (m *VaultMigrationProposal) String() string { return proto.CompactTextString(m) }
func (*VaultMigrationProposal) ProtoMessage()    {}
func (*VaultMigrationProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a392f2055d6dba, []int{20}
}
func (m *VaultMigrationProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultMigrationProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultMigrationProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultMigrationProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultMigrationProposal.Merge(m, src)
}
func (m *VaultMigrationProposal) XXX_Size() int {
	return m.Size()
}
func (m *VaultMigrationProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultMigrationProposal.DiscardUnknown(m)
}

var xxx_messageInfo_VaultMigrationProposal proto.InternalMessageInfo

func (m *VaultMigrationProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *VaultMigrationProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VaultMigrationProposal) GetMigrationInfo() MigrationInfo {
	if m != nil {
		return m.MigrationInfo
	}
	return MigrationInfo{}
}

func (m *VaultMigrationProposal) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "sgn.pegbridge.v1.Params")
	proto.RegisterType((*ContractInfo)(nil), "sgn.pegbridge.v1.ContractInfo")
	proto.RegisterType((*PegConfig)(nil), "sgn.pegbridge.v1.PegConfig")
	proto.RegisterType((*OrigPeggedPair)(nil), "sgn.pegbridge.v1.OrigPeggedPair")
	proto.RegisterType((*PeggedOrigIndex)(nil), "sgn.pegbridge.v1.PeggedOrigIndex")
	proto.RegisterType((*FeeSplit)(nil), "sgn.pegbridge.v1.FeeSplit")
	proto.RegisterType((*DepositInfo)(nil), "sgn.pegbridge.v1.DepositInfo")
	proto.RegisterType((*MintInfo)(nil), "sgn.pegbridge.v1.MintInfo")
	proto.RegisterType((*BurnInfo)(nil), "sgn.pegbridge.v1.BurnInfo")
	proto.RegisterType((*WithdrawInfo)(nil), "sgn.pegbridge.v1.WithdrawInfo")
	proto.RegisterType((*FeeClaimInfo)(nil), "sgn.pegbridge.v1.FeeClaimInfo")
	proto.RegisterType((*MintOnChain)(nil), "sgn.pegbridge.v1.MintOnChain")
	proto.RegisterType((*WithdrawOnChain)(nil), "sgn.pegbridge.v1.WithdrawOnChain")
	proto.RegisterType((*MigrationInfo)(nil), "sgn.pegbridge.v1.MigrationInfo")
	proto.RegisterType((*VaultMigration)(nil), "sgn.pegbridge.v1.VaultMigration")
	proto.RegisterType((*PegProposal)(nil), "sgn.pegbridge.v1.PegProposal")
	proto.RegisterType((*PairDeleteProposal)(nil), "sgn.pegbridge.v1.PairDeleteProposal")
	proto.RegisterType((*OriginalTokenVaultDeleteProposal)(nil), "sgn.pegbridge.v1.OriginalTokenVaultDeleteProposal")
	proto.RegisterType((*PeggedTokenBridgeDeleteProposal)(nil), "sgn.pegbridge.v1.PeggedTokenBridgeDeleteProposal")
	proto.RegisterType((*TotalSupplyUpdateProposal)(nil), "sgn.pegbridge.v1.TotalSupplyUpdateProposal")
	proto.RegisterType((*VaultMigrationProposal)(nil), "sgn.pegbridge.v1.VaultMigrationProposal")
}

func init() { proto.RegisterFile("sgn/pegbridge/v1/pegbridge.proto", fileDescriptor_87a392f2055d6dba) }

var fileDescriptor_87a392f2055d6dba = []byte{
	// 1903 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4f, 0x6f, 0x1c, 0x49,
	0x15, 0x77, 0x7b, 0xec, 0xf9, 0xf3, 0x66, 0xc6, 0x4e, 0xca, 0x76, 0x32, 0x76, 0x96, 0xe9, 0xa1,
	0x40, 0xab, 0x48, 0x9b, 0xcc, 0x90, 0x10, 0x84, 0xb0, 0x40, 0xda, 0x8c, 0xb3, 0x61, 0x0d, 0xac,
	0x6c, 0xca, 0x66, 0x91, 0x10, 0x52, 0xab, 0xdd, 0x5d, 0xd3, 0x69, 0xa5, 0xa7, 0xab, 0x53, 0xdd,
	0xe3, 0xd8, 0x5f, 0x00, 0xae, 0x5c, 0x56, 0x5a, 0xed, 0x69, 0x25, 0x2e, 0x48, 0xdc, 0x10, 0x1c,
	0x91, 0x38, 0xee, 0x8d, 0x15, 0x27, 0x84, 0xd0, 0x80, 0x1c, 0x90, 0x60, 0x2f, 0x2b, 0xcd, 0x27,
	0x40, 0xf5, 0xa7, 0x7b, 0xba, 0xc7, 0xce, 0xda, 0x71, 0x92, 0x0b, 0xda, 0x93, 0xfb, 0xbd, 0x57,
	0xaf, 0xde, 0x7b, 0xf5, 0x7e, 0xef, 0xd5, 0x9b, 0x32, 0x74, 0x62, 0x2f, 0xec, 0x45, 0xd4, 0x3b,
	0xe0, 0xbe, 0xeb, 0xd1, 0xde, 0xe1, 0x9d, 0x29, 0xd1, 0x8d, 0x38, 0x4b, 0x18, 0xba, 0x12, 0x7b,
	0x61, 0x77, 0xca, 0x3c, 0xbc, 0xb3, 0xb1, 0xee, 0xb0, 0x78, 0xc8, 0x62, 0x4b, 0xca, 0x7b, 0x8a,
	0x50, 0x8b, 0x37, 0x56, 0x3d, 0xe6, 0x31, 0xc5, 0x17, 0x5f, 0x9a, 0xdb, 0xf6, 0x18, 0xf3, 0x02,
	0xda, 0x93, 0xd4, 0xc1, 0x68, 0xd0, 0x73, 0x47, 0xdc, 0x4e, 0x7c, 0x16, 0x6a, 0xf9, 0x86, 0x70,
	0xc2, 0x61, 0xc3, 0x21, 0x0b, 0x85, 0x07, 0xea, 0x4b, 0xc9, 0xf0, 0x6f, 0x0d, 0x28, 0xef, 0xda,
	0xdc, 0x1e, 0xc6, 0xe8, 0x23, 0x03, 0xd6, 0x12, 0xee, 0x7b, 0x1e, 0xe5, 0x56, 0xec, 0x7b, 0xa1,
	0xe5, 0x30, 0x16, 0xb8, 0xec, 0x69, 0xd8, 0x32, 0x3a, 0xc6, 0xcd, 0xfa, 0xdd, 0xf5, 0xae, 0xb2,
	0xd3, 0x4d, 0xed, 0x74, 0x1f, 0x68, 0x3b, 0xfd, 0x1f, 0x7e, 0x32, 0x36, 0xe7, 0x3e, 0x1b, 0x9b,
	0xe6, 0x99, 0xfa, 0xb7, 0xd8, 0xd0, 0x4f, 0xe8, 0x30, 0x4a, 0x8e, 0x27, 0x63, 0xf3, 0x8d, 0x63,
	0x7b, 0x18, 0x6c, 0xe2, 0x33, 0x17, 0xe2, 0x0f, 0xff, 0x61, 0x1a, 0x64, 0x45, 0xcb, 0xf6, 0x7c,
	0x2f, 0xdc, 0xd2, 0x92, 0xcd, 0x85, 0x0f, 0x3f, 0x36, 0xe7, 0xf0, 0x47, 0x06, 0x34, 0xb6, 0x58,
	0x98, 0x70, 0xdb, 0x49, 0xb6, 0xc3, 0x01, 0x43, 0x3f, 0x87, 0xaa, 0xa3, 0x69, 0xed, 0xe5, 0x8d,
	0xae, 0x38, 0x50, 0x1d, 0xe3, 0xe1, 0x9d, 0x6e, 0x7e, 0x79, 0xff, 0x6b, 0xc2, 0xcf, 0xc9, 0xd8,
	0xbc, 0xa1, 0x9c, 0x88, 0xa8, 0xe7, 0x51, 0xd7, 0x4a, 0xd8, 0x63, 0x1a, 0x5a, 0x2a, 0x01, 0x31,
	0x26, 0xd9, 0x8e, 0xe8, 0x16, 0x54, 0x0e, 0x29, 0x8f, 0x7d, 0x16, 0xb6, 0xe6, 0x3b, 0xc6, 0xcd,
	0x66, 0x1f, 0x4d, 0xc6, 0xe6, 0x92, 0xd2, 0xd5, 0x02, 0x4c, 0xd2, 0x25, 0xf8, 0xcf, 0x25, 0xa8,
	0xed, 0x52, 0x6f, 0x8b, 0x85, 0x03, 0xdf, 0x43, 0x23, 0x58, 0x3d, 0x6b, 0xfb, 0x96, 0xd1, 0x29,
	0xdd, 0xac, 0xdf, 0x6d, 0x77, 0x67, 0xd3, 0x7e, 0x09, 0x47, 0x91, 0x62, 0xef, 0x0b, 0x6e, 0x5f,
	0x31, 0xd1, 0x11, 0xac, 0x31, 0xee, 0x7b, 0x7e, 0x68, 0x07, 0x7a, 0xf9, 0xa1, 0x3d, 0x0a, 0x92,
	0xb8, 0x35, 0x7f, 0x21, 0xbb, 0x5f, 0xd7, 0x76, 0x75, 0x96, 0xce, 0xdc, 0x0a, 0x93, 0x95, 0x94,
	0x2f, 0x4d, 0xbf, 0x2f, 0xb9, 0x28, 0x84, 0xab, 0x82, 0x6d, 0x69, 0x5f, 0x23, 0xdb, 0xe7, 0x71,
	0xab, 0x24, 0xad, 0x76, 0x4e, 0x5b, 0xdd, 0xe1, 0xbe, 0xb7, 0x2b, 0x57, 0xee, 0xda, 0x3e, 0xef,
	0x77, 0xb4, 0xdd, 0xd6, 0xd4, 0x6e, 0x61, 0x23, 0x4c, 0x96, 0x59, 0x41, 0x23, 0x46, 0x36, 0x5c,
	0x19, 0x50, 0x6a, 0xc5, 0x51, 0xe0, 0x27, 0x96, 0x17, 0xb0, 0x03, 0x3b, 0x68, 0x2d, 0x48, 0x08,
	0x6c, 0x9c, 0x36, 0xf7, 0x90, 0xd2, 0x3d, 0xb1, 0xb0, 0x7f, 0x63, 0x32, 0x36, 0xaf, 0x2b, 0x23,
	0xb3, 0xda, 0x98, 0x2c, 0x0d, 0xf4, 0xb2, 0xef, 0x2b, 0xc6, 0x1f, 0xca, 0xb0, 0x54, 0x74, 0x14,
	0xf5, 0x61, 0x41, 0x38, 0x92, 0x95, 0x44, 0x11, 0x6c, 0xef, 0x90, 0xad, 0xbb, 0xdf, 0x50, 0xf9,
	0x58, 0xd1, 0x11, 0xd5, 0xa7, 0x11, 0x61, 0x22, 0x75, 0xd1, 0xbb, 0x50, 0x56, 0xb1, 0x49, 0x54,
	0x7d, 0xe1, 0x2e, 0x6b, 0x7a, 0x97, 0x66, 0x1e, 0x07, 0x98, 0x68, 0x7d, 0xf4, 0x5d, 0x68, 0x0e,
	0xfd, 0x30, 0xb1, 0x44, 0x28, 0x91, 0x1f, 0x89, 0xf3, 0x16, 0x30, 0x6d, 0x4d, 0xc6, 0xe6, 0xaa,
	0xd2, 0x28, 0x88, 0x31, 0xa9, 0x0b, 0xfa, 0x21, 0xa5, 0xbb, 0x7e, 0x14, 0xa3, 0xef, 0x40, 0x63,
	0x68, 0x1f, 0x59, 0xe9, 0x12, 0x79, 0x7a, 0xb5, 0xfe, 0xf5, 0xc9, 0xd8, 0x5c, 0xd1, 0xca, 0x39,
	0x29, 0x26, 0x30, 0xb4, 0x8f, 0xde, 0x53, 0xea, 0xc2, 0xf0, 0xc1, 0x88, 0x87, 0x53, 0xc3, 0x8b,
	0xb3, 0x86, 0x0b, 0x62, 0x4c, 0xea, 0x82, 0x9e, 0x31, 0x9c, 0x2e, 0x69, 0x95, 0xcf, 0x32, 0x9c,
	0x4a, 0x95, 0xe1, 0xbe, 0x52, 0x47, 0xf7, 0x00, 0xe2, 0x51, 0x14, 0x05, 0xc7, 0x96, 0x63, 0x47,
	0xad, 0x8a, 0x54, 0x5c, 0x9b, 0x8c, 0xcd, 0xab, 0x4a, 0x71, 0x2a, 0xc3, 0xa4, 0xa6, 0x88, 0x2d,
	0x3b, 0x42, 0xdf, 0x83, 0xa6, 0xc4, 0xae, 0x95, 0x96, 0x73, 0x75, 0xd6, 0xdd, 0x82, 0x18, 0x93,
	0x86, 0xa4, 0xdf, 0x57, 0x24, 0x7a, 0x1b, 0x96, 0x14, 0x94, 0x32, 0xfd, 0x9a, 0xd4, 0x5f, 0x9f,
	0x8c, 0xcd, 0x35, 0x1d, 0x6e, 0x41, 0x8e, 0x49, 0x53, 0x31, 0xd2, 0x1d, 0x46, 0x70, 0x3d, 0xcb,
	0x84, 0xc2, 0x1c, 0x3b, 0xa4, 0x9c, 0xfb, 0x2e, 0x6d, 0xc1, 0xb9, 0x98, 0xc5, 0x93, 0xb1, 0xd9,
	0x9e, 0x49, 0x67, 0x71, 0x13, 0x4c, 0x56, 0x75, 0x62, 0xa5, 0xc6, 0x8e, 0x66, 0x0b, 0xb3, 0x59,
	0x1e, 0x66, 0xcc, 0xd6, 0x5f, 0xc4, 0xec, 0x73, 0x36, 0xc1, 0x64, 0x55, 0xa7, 0xb5, 0x60, 0x16,
	0xff, 0xda, 0x80, 0x65, 0x55, 0x33, 0xa2, 0x7a, 0xb6, 0x43, 0x97, 0x1e, 0xa1, 0x1f, 0x64, 0xa0,
	0xbf, 0x40, 0x9f, 0x3e, 0x07, 0xf6, 0x0f, 0x74, 0x11, 0xce, 0x9f, 0xbf, 0xd3, 0xf3, 0xcb, 0x10,
	0x3f, 0x81, 0x6a, 0xea, 0x39, 0xfa, 0x16, 0x5c, 0x77, 0x68, 0x40, 0xb9, 0x95, 0x70, 0x6a, 0xc7,
	0x23, 0x7e, 0xac, 0xa0, 0x4b, 0xb9, 0x23, 0xdd, 0x6d, 0x92, 0x55, 0x29, 0xde, 0xd7, 0x52, 0x01,
	0x64, 0xca, 0x1d, 0xd4, 0x85, 0x95, 0x19, 0x35, 0xdb, 0x75, 0xb9, 0xf4, 0xab, 0x46, 0xae, 0x16,
	0x54, 0xee, 0xbb, 0x2e, 0xc7, 0xff, 0x36, 0xa0, 0xfe, 0x80, 0x46, 0x2c, 0xf6, 0xd5, 0xf5, 0xd5,
	0x85, 0xaa, 0xf3, 0xc8, 0xf6, 0x43, 0xcb, 0x57, 0xc7, 0xb2, 0xd0, 0x5f, 0x99, 0x8c, 0xcd, 0x65,
	0xe5, 0x6b, 0x2a, 0xc1, 0xa4, 0x22, 0x3f, 0xb7, 0x5d, 0x81, 0x7e, 0x57, 0xa9, 0x0b, 0x0d, 0x61,
	0xa6, 0x91, 0x47, 0xff, 0x54, 0x86, 0x49, 0x4d, 0x13, 0xdb, 0x2e, 0x7a, 0x0b, 0x2a, 0x12, 0x37,
	0xbe, 0x2b, 0xfb, 0x43, 0x23, 0x7f, 0x8d, 0x69, 0x01, 0x26, 0x65, 0xf1, 0xb5, 0xed, 0x9e, 0x2e,
	0x95, 0x85, 0x17, 0x29, 0x15, 0x7d, 0x4f, 0x9f, 0x94, 0xa0, 0x2a, 0x5a, 0xc5, 0xa5, 0x82, 0x7c,
	0x07, 0xae, 0x48, 0xaf, 0xe4, 0x98, 0x61, 0x1d, 0x1c, 0x27, 0x34, 0xd6, 0xa1, 0xe6, 0x9a, 0xf7,
	0xec, 0x0a, 0x4c, 0x96, 0x04, 0x6b, 0x57, 0x70, 0xfa, 0x82, 0x81, 0xf6, 0x00, 0xc4, 0x70, 0x61,
	0x27, 0x23, 0x4e, 0xd3, 0x8b, 0xa8, 0x35, 0x03, 0x95, 0xbd, 0x74, 0x41, 0x7f, 0x5d, 0xe3, 0x24,
	0xed, 0x23, 0x99, 0x26, 0x26, 0xb9, 0x6d, 0x44, 0x2c, 0x07, 0x76, 0x4c, 0x73, 0xed, 0x32, 0x17,
	0x4b, 0x2a, 0xc1, 0xa4, 0x22, 0x3e, 0x45, 0xbb, 0x7a, 0x1b, 0x96, 0x04, 0x88, 0x68, 0x98, 0xd8,
	0x9e, 0xd2, 0x5a, 0x94, 0x5a, 0xb9, 0xce, 0x51, 0x94, 0x63, 0xd2, 0x9c, 0x32, 0xc4, 0x0e, 0xb7,
	0xa0, 0x12, 0x8f, 0x1c, 0x87, 0xc6, 0xb1, 0x6c, 0x93, 0xd5, 0x7c, 0xf2, 0xb4, 0x00, 0x93, 0x74,
	0x09, 0xc2, 0xd0, 0x0c, 0xec, 0x38, 0xb1, 0x38, 0x7d, 0x62, 0x25, 0xfe, 0x90, 0xca, 0x0e, 0x59,
	0x22, 0x75, 0xc1, 0x24, 0xf4, 0xc9, 0xbe, 0x3f, 0xa4, 0x67, 0x74, 0xb3, 0xea, 0x8b, 0x75, 0x33,
	0x9d, 0xe4, 0x0f, 0xe6, 0xa1, 0x2a, 0xda, 0xf2, 0xa5, 0x92, 0xfc, 0x16, 0x54, 0x64, 0x53, 0xc9,
	0x60, 0x9c, 0x0b, 0x4b, 0x0b, 0x30, 0x29, 0x8b, 0xaf, 0x6d, 0x17, 0x7d, 0x1b, 0xea, 0x4f, 0xfd,
	0xe4, 0x91, 0xcb, 0xed, 0xa7, 0x53, 0x10, 0x5f, 0x9b, 0x8c, 0x4d, 0xa4, 0x14, 0x72, 0x42, 0x4c,
	0x20, 0xa5, 0x8a, 0xc8, 0x5f, 0x38, 0x17, 0xf9, 0xa7, 0xcf, 0x65, 0xf1, 0x52, 0xe7, 0xf2, 0x79,
	0x09, 0x1a, 0x3f, 0x4d, 0x7d, 0xb8, 0xcc, 0xd9, 0xfc, 0x18, 0x56, 0xb3, 0x88, 0x4e, 0x17, 0x81,
	0x39, 0x1d, 0x0b, 0xcf, 0x5a, 0x85, 0x09, 0x4a, 0xd9, 0x5f, 0x16, 0xc3, 0xf9, 0xc5, 0xf0, 0x72,
	0x93, 0x81, 0xce, 0xf8, 0x2f, 0x0c, 0x68, 0x3c, 0xa4, 0x74, 0x2b, 0xb0, 0xfd, 0xa1, 0xcc, 0xf8,
	0x0c, 0x60, 0x8d, 0x0b, 0x03, 0xf6, 0x94, 0x3b, 0xf3, 0x2f, 0xe2, 0x0e, 0xfe, 0x9d, 0x01, 0x75,
	0xd1, 0x77, 0x77, 0xc2, 0x2d, 0x81, 0x25, 0xb4, 0x0a, 0x8b, 0x72, 0x72, 0x57, 0x1e, 0x10, 0x45,
	0xa0, 0x16, 0x54, 0x6c, 0xc7, 0x61, 0xa3, 0x30, 0x51, 0x90, 0x22, 0x29, 0x89, 0xae, 0x41, 0xd9,
	0x1e, 0x4a, 0x81, 0xac, 0x31, 0xa2, 0x29, 0xf4, 0x06, 0xa4, 0xd7, 0x09, 0xe3, 0xaa, 0x92, 0xc8,
	0x94, 0x81, 0x3a, 0xd0, 0xe0, 0x74, 0x60, 0x65, 0x18, 0x17, 0x59, 0x5d, 0x20, 0xc0, 0xe9, 0x60,
	0x4b, 0x23, 0x7a, 0x0d, 0xca, 0x62, 0x85, 0xef, 0xca, 0xb4, 0x35, 0xc8, 0x22, 0xa7, 0x83, 0x6d,
	0x57, 0x9f, 0xde, 0x1f, 0x0d, 0x58, 0x4e, 0xeb, 0xe5, 0x8b, 0x1d, 0xdf, 0x80, 0x2a, 0xa7, 0x0e,
	0xf5, 0x0f, 0x29, 0xd7, 0x9e, 0x67, 0xf4, 0x73, 0x5d, 0xff, 0x2a, 0x34, 0x64, 0x3f, 0x49, 0x23,
	0x56, 0xde, 0xcb, 0x71, 0xf4, 0xbe, 0x8e, 0xfa, 0x25, 0xfd, 0xff, 0xd3, 0x3c, 0x34, 0xdf, 0xf3,
	0x3d, 0xf5, 0x53, 0xf8, 0x52, 0x05, 0xff, 0x66, 0x1a, 0xad, 0x1c, 0x1c, 0xfa, 0x57, 0x26, 0x63,
	0xb3, 0xa1, 0x7f, 0x26, 0x0b, 0x36, 0x4e, 0xe3, 0xdf, 0x84, 0xc6, 0x80, 0xb3, 0x61, 0x06, 0x0e,
	0x35, 0xed, 0xe7, 0xe6, 0xe6, 0xbc, 0x14, 0x93, 0xba, 0x20, 0xd3, 0x09, 0xf4, 0x1e, 0x40, 0xc2,
	0x66, 0x2e, 0xf5, 0xdc, 0xe8, 0x30, 0x95, 0x61, 0x52, 0x4b, 0x58, 0x51, 0x4b, 0x0c, 0x35, 0xa2,
	0xe6, 0x16, 0x67, 0xc7, 0xed, 0xa9, 0x4c, 0x6a, 0xdd, 0x57, 0xdf, 0xa8, 0x07, 0x55, 0x7a, 0x44,
	0x9d, 0x91, 0x40, 0x4b, 0x79, 0xb6, 0x31, 0xa4, 0x12, 0x4c, 0xb2, 0x45, 0xf8, 0x5f, 0x06, 0x2c,
	0xc9, 0x9f, 0x91, 0xd9, 0x39, 0x22, 0x0a, 0x4b, 0xc3, 0x94, 0xb0, 0xfc, 0x70, 0xc0, 0xf4, 0xdc,
	0x68, 0x9e, 0x9e, 0x58, 0x0b, 0x87, 0xdf, 0xff, 0x8a, 0x6e, 0x5e, 0x6b, 0x69, 0x9b, 0xcf, 0x6f,
	0x82, 0x49, 0x73, 0x58, 0x48, 0x55, 0x0f, 0xaa, 0x2e, 0xb5, 0xdd, 0xc0, 0x0f, 0x75, 0x7b, 0xc8,
	0xbb, 0x9a, 0x4a, 0x30, 0xc9, 0x16, 0x89, 0x1c, 0xe4, 0xaa, 0x37, 0x6e, 0x55, 0x3b, 0xa5, 0xe2,
	0x6f, 0x97, 0xbc, 0x14, 0x93, 0xfa, 0xb4, 0xb8, 0x63, 0xfc, 0x77, 0x03, 0xea, 0xbb, 0xd4, 0xdb,
	0xe5, 0x2c, 0x62, 0xb1, 0x1d, 0x48, 0x94, 0xfb, 0x49, 0x40, 0x65, 0x68, 0x35, 0xa2, 0x08, 0xd4,
	0x81, 0xba, 0x4b, 0x63, 0x87, 0xfb, 0x51, 0x92, 0x76, 0x80, 0x1a, 0xc9, 0xb3, 0xd0, 0x26, 0x40,
	0x44, 0x3d, 0xcb, 0x91, 0x2f, 0x0d, 0x12, 0x05, 0xe9, 0x14, 0x5c, 0x38, 0x97, 0xec, 0x31, 0x82,
	0xd4, 0xa2, 0xec, 0x5d, 0xe2, 0x5d, 0xa8, 0xe8, 0xca, 0xd5, 0x3d, 0xbb, 0x2b, 0xce, 0xeb, 0x6f,
	0x63, 0xf3, 0x4d, 0xcf, 0x4f, 0x1e, 0x8d, 0x0e, 0xc4, 0x85, 0xa0, 0x1f, 0x9d, 0xf4, 0x9f, 0xdb,
	0xb1, 0xfb, 0xb8, 0x97, 0x1c, 0x47, 0x34, 0xee, 0x6e, 0x87, 0x09, 0x49, 0xd5, 0x37, 0x97, 0xff,
	0xf3, 0xb1, 0x39, 0xf7, 0x97, 0xdf, 0xdf, 0xae, 0x88, 0x81, 0x9b, 0x86, 0x09, 0xfe, 0xdc, 0x00,
	0x24, 0x7e, 0x24, 0x3f, 0xa0, 0x01, 0x4d, 0xe8, 0x4b, 0x47, 0xf9, 0x10, 0x96, 0xc4, 0x6f, 0x7f,
	0x2b, 0x61, 0x96, 0x2b, 0x77, 0xd4, 0x91, 0x9e, 0xfb, 0x9a, 0x40, 0x1a, 0x42, 0x6f, 0x9f, 0x29,
	0x3f, 0x5e, 0x67, 0xc4, 0x9f, 0x19, 0xd0, 0xd9, 0x39, 0xf5, 0x16, 0xf2, 0x8a, 0xe2, 0x5f, 0xcf,
	0x75, 0x91, 0x92, 0x6c, 0x49, 0x59, 0xc3, 0x68, 0x4d, 0x1f, 0xa6, 0x64, 0x25, 0x67, 0x8f, 0x50,
	0xf9, 0x60, 0x17, 0x5f, 0x71, 0xb0, 0xff, 0x35, 0xc0, 0xdc, 0x9d, 0x7d, 0x71, 0xfa, 0x3f, 0x8d,
	0xf5, 0x97, 0xf3, 0xb0, 0xbe, 0xcf, 0x12, 0x3b, 0xd8, 0x93, 0x6f, 0x08, 0x3f, 0x89, 0x5c, 0xfb,
	0x15, 0x44, 0x79, 0x0f, 0x16, 0x04, 0x32, 0x2f, 0x8c, 0x63, 0xb9, 0x5a, 0xdc, 0x60, 0x89, 0x70,
	0xc5, 0x52, 0xef, 0x19, 0x0a, 0xc4, 0xa4, 0x9e, 0x4c, 0xdd, 0x7b, 0x9d, 0x27, 0xf1, 0xc1, 0x3c,
	0x5c, 0x2b, 0xb6, 0xe6, 0x97, 0x3e, 0x86, 0x1f, 0x9d, 0x6a, 0xed, 0xa5, 0x8b, 0xb5, 0xf6, 0x05,
	0x11, 0xd5, 0x6c, 0x07, 0xdf, 0x80, 0x6a, 0xfa, 0xde, 0x2d, 0x8f, 0xa6, 0x44, 0x32, 0xfa, 0x35,
	0x9e, 0x4b, 0x7f, 0xe7, 0x37, 0x27, 0x6d, 0xe3, 0x93, 0x93, 0xb6, 0xf1, 0xe9, 0x49, 0xdb, 0xf8,
	0xe7, 0x49, 0xdb, 0xf8, 0xd5, 0xb3, 0xf6, 0xdc, 0xa7, 0xcf, 0xda, 0x73, 0x7f, 0x7d, 0xd6, 0x9e,
	0xfb, 0xd9, 0x9d, 0xfc, 0xfe, 0x34, 0xa0, 0xfc, 0x76, 0x48, 0x93, 0xa7, 0x8c, 0x3f, 0xee, 0xc5,
	0x5e, 0x78, 0xfb, 0xf0, 0x6e, 0xef, 0x28, 0xf7, 0x5f, 0x01, 0x69, 0xee, 0xa0, 0x2c, 0x87, 0xf8,
	0x6f, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x64, 0x3a, 0x1b, 0x6d, 0x33, 0x18, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TriggerSignCooldown != that1.TriggerSignCooldown {
		return false
	}
	return true
}
func (this *ContractInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContractInfo)
	if !ok {
		that2, ok := that.(ContractInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Contract.Equal(&that1.Contract) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *PegConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PegConfig)
	if !ok {
		that2, ok := that.(PegConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PeggedTokenBridges) != len(that1.PeggedTokenBridges) {
		return false
	}
	for i := range this.PeggedTokenBridges {
		if !this.PeggedTokenBridges[i].Equal(&that1.PeggedTokenBridges[i]) {
			return false
		}
	}
	if len(this.OriginalTokenVaults) != len(that1.OriginalTokenVaults) {
		return false
	}
	for i := range this.OriginalTokenVaults {
		if !this.OriginalTokenVaults[i].Equal(&that1.OriginalTokenVaults[i]) {
			return false
		}
	}
	if len(this.OrigPeggedPairs) != len(that1.OrigPeggedPairs) {
		return false
	}
	for i := range this.OrigPeggedPairs {
		if !this.OrigPeggedPairs[i].Equal(&that1.OrigPeggedPairs[i]) {
			return false
		}
	}
	if !this.FeeSplitGlobal.Equal(that1.FeeSplitGlobal) {
		return false
	}
	return true
}
func (this *OrigPeggedPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrigPeggedPair)
	if !ok {
		that2, ok := that.(OrigPeggedPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Orig.Equal(&that1.Orig) {
		return false
	}
	if !this.Pegged.Equal(&that1.Pegged) {
		return false
	}
	if this.MintFeePips != that1.MintFeePips {
		return false
	}
	if this.MaxMintFee != that1.MaxMintFee {
		return false
	}
	if this.BurnFeePips != that1.BurnFeePips {
		return false
	}
	if this.MaxBurnFee != that1.MaxBurnFee {
		return false
	}
	if this.SupplyCap != that1.SupplyCap {
		return false
	}
	if this.VaultVersion != that1.VaultVersion {
		return false
	}
	if this.BridgeVersion != that1.BridgeVersion {
		return false
	}
	if !this.MintFeeSplitOverride.Equal(that1.MintFeeSplitOverride) {
		return false
	}
	if !this.BurnFeeSplitOverride.Equal(that1.BurnFeeSplitOverride) {
		return false
	}
	return true
}
func (this *PeggedOrigIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeggedOrigIndex)
	if !ok {
		that2, ok := that.(PeggedOrigIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pegged.Equal(&that1.Pegged) {
		return false
	}
	if !this.Orig.Equal(&that1.Orig) {
		return false
	}
	return true
}
func (this *FeeSplit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeSplit)
	if !ok {
		that2, ok := that.(FeeSplit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CelerTreasuryFeePerc != that1.CelerTreasuryFeePerc {
		return false
	}
	if this.CelerTreasuryAddr != that1.CelerTreasuryAddr {
		return false
	}
	return true
}
func (this *DepositInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DepositInfo)
	if !ok {
		that2, ok := that.(DepositInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if !bytes.Equal(this.DepositId, that1.DepositId) {
		return false
	}
	if !bytes.Equal(this.MintId, that1.MintId) {
		return false
	}
	if this.VaultVersion != that1.VaultVersion {
		return false
	}
	return true
}
func (this *MintInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MintInfo)
	if !ok {
		that2, ok := that.(MintInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if !bytes.Equal(this.MintProtoBytes, that1.MintProtoBytes) {
		return false
	}
	if len(this.Signatures) != len(that1.Signatures) {
		return false
	}
	for i := range this.Signatures {
		if !this.Signatures[i].Equal(&that1.Signatures[i]) {
			return false
		}
	}
	if this.BaseFee != that1.BaseFee {
		return false
	}
	if this.PercentageFee != that1.PercentageFee {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.LastReqTime != that1.LastReqTime {
		return false
	}
	if this.BridgeVersion != that1.BridgeVersion {
		return false
	}
	return true
}
func (this *BurnInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BurnInfo)
	if !ok {
		that2, ok := that.(BurnInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if !bytes.Equal(this.BurnId, that1.BurnId) {
		return false
	}
	if !bytes.Equal(this.WithdrawId, that1.WithdrawId) {
		return false
	}
	if !bytes.Equal(this.MintId, that1.MintId) {
		return false
	}
	if this.BridgeVersion != that1.BridgeVersion {
		return false
	}
	return true
}
func (this *WithdrawInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WithdrawInfo)
	if !ok {
		that2, ok := that.(WithdrawInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if !bytes.Equal(this.WithdrawProtoBytes, that1.WithdrawProtoBytes) {
		return false
	}
	if len(this.Signatures) != len(that1.Signatures) {
		return false
	}
	for i := range this.Signatures {
		if !this.Signatures[i].Equal(&that1.Signatures[i]) {
			return false
		}
	}
	if this.BaseFee != that1.BaseFee {
		return false
	}
	if this.PercentageFee != that1.PercentageFee {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.LastReqTime != that1.LastReqTime {
		return false
	}
	if this.VaultVersion != that1.VaultVersion {
		return false
	}
	return true
}
func (this *FeeClaimInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeClaimInfo)
	if !ok {
		that2, ok := that.(FeeClaimInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.WithdrawId, that1.WithdrawId) {
		return false
	}
	if this.VaultVersion != that1.VaultVersion {
		return false
	}
	return true
}
func (this *MintOnChain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MintOnChain)
	if !ok {
		that2, ok := that.(MintOnChain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Token, that1.Token) {
		return false
	}
	if !bytes.Equal(this.Account, that1.Account) {
		return false
	}
	if !bytes.Equal(this.Amount, that1.Amount) {
		return false
	}
	if !bytes.Equal(this.Depositor, that1.Depositor) {
		return false
	}
	if this.RefChainId != that1.RefChainId {
		return false
	}
	if !bytes.Equal(this.RefId, that1.RefId) {
		return false
	}
	return true
}
func (this *WithdrawOnChain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WithdrawOnChain)
	if !ok {
		that2, ok := that.(WithdrawOnChain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Token, that1.Token) {
		return false
	}
	if !bytes.Equal(this.Receiver, that1.Receiver) {
		return false
	}
	if !bytes.Equal(this.Amount, that1.Amount) {
		return false
	}
	if !bytes.Equal(this.BurnAccount, that1.BurnAccount) {
		return false
	}
	if this.RefChainId != that1.RefChainId {
		return false
	}
	if !bytes.Equal(this.RefId, that1.RefId) {
		return false
	}
	return true
}
func (this *MigrationInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MigrationInfo)
	if !ok {
		that2, ok := that.(MigrationInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.FromVersion != that1.FromVersion {
		return false
	}
	if this.ToVersion != that1.ToVersion {
		return false
	}
	if this.ToAddress != that1.ToAddress {
		return false
	}
	if this.Executor != that1.Executor {
		return false
	}
	return true
}
func (this *VaultMigration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VaultMigration)
	if !ok {
		that2, ok := that.(VaultMigration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MigrationInfo.Equal(&that1.MigrationInfo) {
		return false
	}
	if this.Deadline != that1.Deadline {
		return false
	}
	if len(this.WithdrawIds) != len(that1.WithdrawIds) {
		return false
	}
	for i := range this.WithdrawIds {
		if this.WithdrawIds[i] != that1.WithdrawIds[i] {
			return false
		}
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TriggerSignCooldown, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TriggerSignCooldown):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPegbridge(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ContractInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PegConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PegConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PegConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeSplitGlobal != nil {
		{
			size, err := m.FeeSplitGlobal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPegbridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrigPeggedPairs) > 0 {
		for iNdEx := len(m.OrigPeggedPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrigPeggedPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPegbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OriginalTokenVaults) > 0 {
		for iNdEx := len(m.OriginalTokenVaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginalTokenVaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPegbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PeggedTokenBridges) > 0 {
		for iNdEx := len(m.PeggedTokenBridges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeggedTokenBridges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPegbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrigPeggedPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrigPeggedPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrigPeggedPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BurnFeeSplitOverride != nil {
		{
			size, err := m.BurnFeeSplitOverride.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPegbridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.MintFeeSplitOverride != nil {
		{
			size, err := m.MintFeeSplitOverride.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPegbridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.BridgeVersion != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.BridgeVersion))
		i--
		dAtA[i] = 0x48
	}
	if m.VaultVersion != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.VaultVersion))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SupplyCap) > 0 {
		i -= len(m.SupplyCap)
		copy(dAtA[i:], m.SupplyCap)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.SupplyCap)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MaxBurnFee) > 0 {
		i -= len(m.MaxBurnFee)
		copy(dAtA[i:], m.MaxBurnFee)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.MaxBurnFee)))
		i--
		dAtA[i] = 0x32
	}
	if m.BurnFeePips != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.BurnFeePips))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MaxMintFee) > 0 {
		i -= len(m.MaxMintFee)
		copy(dAtA[i:], m.MaxMintFee)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.MaxMintFee)))
		i--
		dAtA[i] = 0x22
	}
	if m.MintFeePips != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.MintFeePips))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Pegged.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Orig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PeggedOrigIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeggedOrigIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeggedOrigIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Orig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Pegged.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FeeSplit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeSplit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeSplit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CelerTreasuryAddr) > 0 {
		i -= len(m.CelerTreasuryAddr)
		copy(dAtA[i:], m.CelerTreasuryAddr)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.CelerTreasuryAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.CelerTreasuryFeePerc != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.CelerTreasuryFeePerc))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DepositInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultVersion != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.VaultVersion))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MintId) > 0 {
		i -= len(m.MintId)
		copy(dAtA[i:], m.MintId)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.MintId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepositId) > 0 {
		i -= len(m.DepositId)
		copy(dAtA[i:], m.DepositId)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.DepositId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MintInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BridgeVersion != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.BridgeVersion))
		i--
		dAtA[i] = 0x40
	}
	if m.LastReqTime != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.LastReqTime))
		i--
		dAtA[i] = 0x38
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.PercentageFee) > 0 {
		i -= len(m.PercentageFee)
		copy(dAtA[i:], m.PercentageFee)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.PercentageFee)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BaseFee) > 0 {
		i -= len(m.BaseFee)
		copy(dAtA[i:], m.BaseFee)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.BaseFee)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPegbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MintProtoBytes) > 0 {
		i -= len(m.MintProtoBytes)
		copy(dAtA[i:], m.MintProtoBytes)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.MintProtoBytes)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BurnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BridgeVersion != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.BridgeVersion))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MintId) > 0 {
		i -= len(m.MintId)
		copy(dAtA[i:], m.MintId)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.MintId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WithdrawId) > 0 {
		i -= len(m.WithdrawId)
		copy(dAtA[i:], m.WithdrawId)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.WithdrawId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BurnId) > 0 {
		i -= len(m.BurnId)
		copy(dAtA[i:], m.BurnId)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.BurnId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultVersion != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.VaultVersion))
		i--
		dAtA[i] = 0x40
	}
	if m.LastReqTime != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.LastReqTime))
		i--
		dAtA[i] = 0x38
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.PercentageFee) > 0 {
		i -= len(m.PercentageFee)
		copy(dAtA[i:], m.PercentageFee)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.PercentageFee)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BaseFee) > 0 {
		i -= len(m.BaseFee)
		copy(dAtA[i:], m.BaseFee)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.BaseFee)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPegbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.WithdrawProtoBytes) > 0 {
		i -= len(m.WithdrawProtoBytes)
		copy(dAtA[i:], m.WithdrawProtoBytes)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.WithdrawProtoBytes)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeeClaimInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeClaimInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeClaimInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultVersion != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.VaultVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WithdrawId) > 0 {
		i -= len(m.WithdrawId)
		copy(dAtA[i:], m.WithdrawId)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.WithdrawId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MintOnChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintOnChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintOnChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x32
	}
	if m.RefChainId != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.RefChainId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawOnChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawOnChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawOnChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x32
	}
	if m.RefChainId != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.RefChainId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BurnAccount) > 0 {
		i -= len(m.BurnAccount)
		copy(dAtA[i:], m.BurnAccount)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.BurnAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MigrationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MigrationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MigrationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ToVersion != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.ToVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.FromVersion != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.FromVersion))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VaultMigration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultMigration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultMigration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawIds) > 0 {
		for iNdEx := len(m.WithdrawIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WithdrawIds[iNdEx])
			copy(dAtA[i:], m.WithdrawIds[iNdEx])
			i = encodeVarintPegbridge(dAtA, i, uint64(len(m.WithdrawIds[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Deadline != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.MigrationInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PegProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PegProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PegProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Deposit.Size()
		i -= size
		if _, err := m.Deposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.PegConfig != nil {
		{
			size, err := m.PegConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPegbridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PairDeleteProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairDeleteProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairDeleteProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Deposit.Size()
		i -= size
		if _, err := m.Deposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.PairToDelete != nil {
		{
			size, err := m.PairToDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPegbridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OriginalTokenVaultDeleteProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginalTokenVaultDeleteProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginalTokenVaultDeleteProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Deposit.Size()
		i -= size
		if _, err := m.Deposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Version != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if m.ChainId != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeggedTokenBridgeDeleteProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeggedTokenBridgeDeleteProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeggedTokenBridgeDeleteProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Deposit.Size()
		i -= size
		if _, err := m.Deposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Version != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if m.ChainId != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalSupplyUpdateProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalSupplyUpdateProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalSupplyUpdateProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Deposit.Size()
		i -= size
		if _, err := m.Deposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.TotalSupply) > 0 {
		i -= len(m.TotalSupply)
		copy(dAtA[i:], m.TotalSupply)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.TotalSupply)))
		i--
		dAtA[i] = 0x22
	}
	if m.Pair != nil {
		{
			size, err := m.Pair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPegbridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VaultMigrationProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultMigrationProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultMigrationProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Deposit.Size()
		i -= size
		if _, err := m.Deposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Duration != 0 {
		i = encodeVarintPegbridge(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.MigrationInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPegbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPegbridge(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPegbridge(dAtA []byte, offset int, v uint64) int {
	offset -= sovPegbridge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TriggerSignCooldown)
	n += 1 + l + sovPegbridge(uint64(l))
	return n
}

func (m *ContractInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Contract.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	if m.Version != 0 {
		n += 1 + sovPegbridge(uint64(m.Version))
	}
	return n
}

func (m *PegConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeggedTokenBridges) > 0 {
		for _, e := range m.PeggedTokenBridges {
			l = e.Size()
			n += 1 + l + sovPegbridge(uint64(l))
		}
	}
	if len(m.OriginalTokenVaults) > 0 {
		for _, e := range m.OriginalTokenVaults {
			l = e.Size()
			n += 1 + l + sovPegbridge(uint64(l))
		}
	}
	if len(m.OrigPeggedPairs) > 0 {
		for _, e := range m.OrigPeggedPairs {
			l = e.Size()
			n += 1 + l + sovPegbridge(uint64(l))
		}
	}
	if m.FeeSplitGlobal != nil {
		l = m.FeeSplitGlobal.Size()
		n += 1 + l + sovPegbridge(uint64(l))
	}
	return n
}

func (m *OrigPeggedPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Orig.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	l = m.Pegged.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	if m.MintFeePips != 0 {
		n += 1 + sovPegbridge(uint64(m.MintFeePips))
	}
	l = len(m.MaxMintFee)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.BurnFeePips != 0 {
		n += 1 + sovPegbridge(uint64(m.BurnFeePips))
	}
	l = len(m.MaxBurnFee)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.SupplyCap)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.VaultVersion != 0 {
		n += 1 + sovPegbridge(uint64(m.VaultVersion))
	}
	if m.BridgeVersion != 0 {
		n += 1 + sovPegbridge(uint64(m.BridgeVersion))
	}
	if m.MintFeeSplitOverride != nil {
		l = m.MintFeeSplitOverride.Size()
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.BurnFeeSplitOverride != nil {
		l = m.BurnFeeSplitOverride.Size()
		n += 1 + l + sovPegbridge(uint64(l))
	}
	return n
}

func (m *PeggedOrigIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pegged.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	l = m.Orig.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	return n
}

func (m *FeeSplit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CelerTreasuryFeePerc != 0 {
		n += 1 + sovPegbridge(uint64(m.CelerTreasuryFeePerc))
	}
	l = len(m.CelerTreasuryAddr)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	return n
}

func (m *DepositInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovPegbridge(uint64(m.ChainId))
	}
	l = len(m.DepositId)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.MintId)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.VaultVersion != 0 {
		n += 1 + sovPegbridge(uint64(m.VaultVersion))
	}
	return n
}

func (m *MintInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovPegbridge(uint64(m.ChainId))
	}
	l = len(m.MintProtoBytes)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovPegbridge(uint64(l))
		}
	}
	l = len(m.BaseFee)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.PercentageFee)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.Success {
		n += 2
	}
	if m.LastReqTime != 0 {
		n += 1 + sovPegbridge(uint64(m.LastReqTime))
	}
	if m.BridgeVersion != 0 {
		n += 1 + sovPegbridge(uint64(m.BridgeVersion))
	}
	return n
}

func (m *BurnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovPegbridge(uint64(m.ChainId))
	}
	l = len(m.BurnId)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.WithdrawId)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.MintId)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.BridgeVersion != 0 {
		n += 1 + sovPegbridge(uint64(m.BridgeVersion))
	}
	return n
}

func (m *WithdrawInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovPegbridge(uint64(m.ChainId))
	}
	l = len(m.WithdrawProtoBytes)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovPegbridge(uint64(l))
		}
	}
	l = len(m.BaseFee)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.PercentageFee)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.Success {
		n += 2
	}
	if m.LastReqTime != 0 {
		n += 1 + sovPegbridge(uint64(m.LastReqTime))
	}
	if m.VaultVersion != 0 {
		n += 1 + sovPegbridge(uint64(m.VaultVersion))
	}
	return n
}

func (m *FeeClaimInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawId)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.VaultVersion != 0 {
		n += 1 + sovPegbridge(uint64(m.VaultVersion))
	}
	return n
}

func (m *MintOnChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.RefChainId != 0 {
		n += 1 + sovPegbridge(uint64(m.RefChainId))
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	return n
}

func (m *WithdrawOnChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.BurnAccount)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.RefChainId != 0 {
		n += 1 + sovPegbridge(uint64(m.RefChainId))
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	return n
}

func (m *MigrationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovPegbridge(uint64(m.ChainId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.FromVersion != 0 {
		n += 1 + sovPegbridge(uint64(m.FromVersion))
	}
	if m.ToVersion != 0 {
		n += 1 + sovPegbridge(uint64(m.ToVersion))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	return n
}

func (m *VaultMigration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MigrationInfo.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	if m.Deadline != 0 {
		n += 1 + sovPegbridge(uint64(m.Deadline))
	}
	if len(m.WithdrawIds) > 0 {
		for _, s := range m.WithdrawIds {
			l = len(s)
			n += 1 + l + sovPegbridge(uint64(l))
		}
	}
	return n
}

func (m *PegProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.PegConfig != nil {
		l = m.PegConfig.Size()
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	return n
}

func (m *PairDeleteProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.PairToDelete != nil {
		l = m.PairToDelete.Size()
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	return n
}

func (m *OriginalTokenVaultDeleteProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovPegbridge(uint64(m.ChainId))
	}
	if m.Version != 0 {
		n += 1 + sovPegbridge(uint64(m.Version))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	return n
}

func (m *PeggedTokenBridgeDeleteProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovPegbridge(uint64(m.ChainId))
	}
	if m.Version != 0 {
		n += 1 + sovPegbridge(uint64(m.Version))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	return n
}

func (m *TotalSupplyUpdateProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	if m.Pair != nil {
		l = m.Pair.Size()
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.TotalSupply)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	return n
}

func (m *VaultMigrationProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPegbridge(uint64(l))
	}
	l = m.MigrationInfo.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovPegbridge(uint64(m.Duration))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovPegbridge(uint64(l))
	return n
}

func sovPegbridge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPegbridge(x uint64) (n int) {
	return sovPegbridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerSignCooldown", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TriggerSignCooldown, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PegConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PegConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PegConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedTokenBridges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggedTokenBridges = append(m.PeggedTokenBridges, ContractInfo{})
			if err := m.PeggedTokenBridges[len(m.PeggedTokenBridges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalTokenVaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalTokenVaults = append(m.OriginalTokenVaults, ContractInfo{})
			if err := m.OriginalTokenVaults[len(m.OriginalTokenVaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigPeggedPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigPeggedPairs = append(m.OrigPeggedPairs, OrigPeggedPair{})
			if err := m.OrigPeggedPairs[len(m.OrigPeggedPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeSplitGlobal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeSplitGlobal == nil {
				m.FeeSplitGlobal = &FeeSplit{}
			}
			if err := m.FeeSplitGlobal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrigPeggedPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrigPeggedPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrigPeggedPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Orig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pegged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pegged.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintFeePips", wireType)
			}
			m.MintFeePips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintFeePips |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMintFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxMintFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnFeePips", wireType)
			}
			m.BurnFeePips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurnFeePips |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBurnFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxBurnFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplyCap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultVersion", wireType)
			}
			m.VaultVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeVersion", wireType)
			}
			m.BridgeVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintFeeSplitOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MintFeeSplitOverride == nil {
				m.MintFeeSplitOverride = &FeeSplit{}
			}
			if err := m.MintFeeSplitOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnFeeSplitOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BurnFeeSplitOverride == nil {
				m.BurnFeeSplitOverride = &FeeSplit{}
			}
			if err := m.BurnFeeSplitOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeggedOrigIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeggedOrigIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeggedOrigIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pegged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pegged.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Orig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeSplit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeSplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeSplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelerTreasuryFeePerc", wireType)
			}
			m.CelerTreasuryFeePerc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CelerTreasuryFeePerc |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelerTreasuryAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CelerTreasuryAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositId = append(m.DepositId[:0], dAtA[iNdEx:postIndex]...)
			if m.DepositId == nil {
				m.DepositId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintId = append(m.MintId[:0], dAtA[iNdEx:postIndex]...)
			if m.MintId == nil {
				m.MintId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultVersion", wireType)
			}
			m.VaultVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintProtoBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintProtoBytes = append(m.MintProtoBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.MintProtoBytes == nil {
				m.MintProtoBytes = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, types.Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentageFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PercentageFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReqTime", wireType)
			}
			m.LastReqTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReqTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeVersion", wireType)
			}
			m.BridgeVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnId = append(m.BurnId[:0], dAtA[iNdEx:postIndex]...)
			if m.BurnId == nil {
				m.BurnId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawId = append(m.WithdrawId[:0], dAtA[iNdEx:postIndex]...)
			if m.WithdrawId == nil {
				m.WithdrawId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintId = append(m.MintId[:0], dAtA[iNdEx:postIndex]...)
			if m.MintId == nil {
				m.MintId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeVersion", wireType)
			}
			m.BridgeVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawProtoBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawProtoBytes = append(m.WithdrawProtoBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.WithdrawProtoBytes == nil {
				m.WithdrawProtoBytes = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, types.Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentageFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PercentageFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReqTime", wireType)
			}
			m.LastReqTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReqTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultVersion", wireType)
			}
			m.VaultVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeClaimInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeClaimInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeClaimInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawId = append(m.WithdrawId[:0], dAtA[iNdEx:postIndex]...)
			if m.WithdrawId == nil {
				m.WithdrawId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultVersion", wireType)
			}
			m.VaultVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintOnChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintOnChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintOnChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount[:0], dAtA[iNdEx:postIndex]...)
			if m.Amount == nil {
				m.Amount = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = append(m.Depositor[:0], dAtA[iNdEx:postIndex]...)
			if m.Depositor == nil {
				m.Depositor = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefChainId", wireType)
			}
			m.RefChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = append(m.RefId[:0], dAtA[iNdEx:postIndex]...)
			if m.RefId == nil {
				m.RefId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawOnChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawOnChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawOnChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = append(m.Receiver[:0], dAtA[iNdEx:postIndex]...)
			if m.Receiver == nil {
				m.Receiver = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount[:0], dAtA[iNdEx:postIndex]...)
			if m.Amount == nil {
				m.Amount = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnAccount = append(m.BurnAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.BurnAccount == nil {
				m.BurnAccount = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefChainId", wireType)
			}
			m.RefChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = append(m.RefId[:0], dAtA[iNdEx:postIndex]...)
			if m.RefId == nil {
				m.RefId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MigrationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MigrationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MigrationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromVersion", wireType)
			}
			m.FromVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToVersion", wireType)
			}
			m.ToVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultMigration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultMigration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultMigration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MigrationInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawIds = append(m.WithdrawIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PegProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PegProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PegProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PegConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PegConfig == nil {
				m.PegConfig = &PegConfig{}
			}
			if err := m.PegConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairDeleteProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairDeleteProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairDeleteProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairToDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PairToDelete == nil {
				m.PairToDelete = &OrigPeggedPair{}
			}
			if err := m.PairToDelete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginalTokenVaultDeleteProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginalTokenVaultDeleteProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginalTokenVaultDeleteProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeggedTokenBridgeDeleteProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeggedTokenBridgeDeleteProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeggedTokenBridgeDeleteProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalSupplyUpdateProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalSupplyUpdateProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalSupplyUpdateProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pair == nil {
				m.Pair = &OrigPeggedPair{}
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultMigrationProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultMigrationProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultMigrationProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MigrationInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPegbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPegbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPegbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPegbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPegbridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPegbridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPegbridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPegbridge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPegbridge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPegbridge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPegbridge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPegbridge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPegbridge = fmt.Errorf("proto: unexpected end of group")
)
